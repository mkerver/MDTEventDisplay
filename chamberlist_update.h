// A structure listing all chamber names and their geometry parameters
// many routines to access them and to have an easy mapping
//
// 16-Jan-2015 E. Diehl Add BME/BOE chambers 
#ifndef chamberlist_h
#define chamberlist_h
#include <cstring>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <stdio.h>
#include <stdlib.h> 
#include "muonfixedid.h"

// check for valid chamber.  Returns number of chamber in array chlist
//  ml={1,2} layer={1..4} tube={1..N}
int stupid( ) { return -1; }
int checkchamber( const char* ChName, int ml=1, int layer=1, int tube=1 );
int MDTindex( const char* ChName ); // Returns chamber index in array chlist from hardware or software name
int MDTindex( const int mfid );     // Returns chamber index in array chlist from muonfixedid
int MDThardname(char* ChName, int idx ); // Returns hardware name from idx
int MDThardname(char* ChName, const char* ChStation ); //"     "    " calibname
std::string MDThardname( int idx );
int MDTcalname (char* ChStation, int idx ); // Returns calibname from idx
int MDTcalname (char* ChStation, const char* ChName ); //  "      "   hardware
int MDTnML     (const char* ChName ); // Returns #ML in the chamber
int MDTeta     (const char* ChName ); // Returns eta of the chamber
int MDTphi     (const char* ChName ); // Returns phi of  the chamber
int MDTstation (const char* ChName, char* Station ); // Returns chamber station
int MDTnTly    (const char* ChName, int ml ); // Returns #Tubes/Layer in the ML
int MDTnLml    (const char* ChName, int ml ); // Returns #Layer in the ML
int MDTnTml    (const char* ChName, int ml ); // Returns #Tubes in the ML
int MDTtypeMZ  (const char* ChName, int mz ); // Returns the ML MEZZ type (1-6)
int MDTtypeML  (const char* ChName, int ml ); // Returns the ML MEZZ type (1-6)
int MDTnmezz   (const char* ChName ); // Returns #Mezzanines in the chamber
int MDTmaxmezz (const char* ChName ); // Returns #Mezzanines including non-existant mezzcards in cut outs
int MDTmlMZ0   (const char* ChName ); // Returns #ML where there is Mezz#0 
int MDTmlMZ    (const char* ChName, int mz ); // Returns #ML of Mezz# mz

int Mezz0ML    (const char* ChName ); // Returns #ML where there is Mezz#0 (DB)
int MDTtotalTubes ( const char* ChName ); // Returns TOT #Tubes  in the chamber
int MDTtotalLayers( const char* ChName ); // Returns TOT #Layers in the chamber
int MDTtotalLayers( int idx );            // Returns TOT #Layers in the chamber

// General Tube Mapping: ML1/2 can be different as #layers and/or #tubes
int MLLT2MLLT ( const char* ChName, int mllt, int& ml, int& ly, int& nt );
int T2MLLT    ( const char* ChName, int tb );   // tubeNumber to MLLT   
int MLLT2T    ( const char* ChName, int mllt ); // MLLT to tubeNumber  (1..#tube)
int MLLT2L    ( const char* ChName, int mllt ); // MLLT to layerNumber (1..#L)
int MLLT2M    ( const char* ChName, int mllt ); // MLLT to mezzNumber  (0..)
int MLLTInMezz( const char* ChName, int mezz, int* tubes ); // mezz->MLLT[24]
int TInMezz   ( const char* ChName, int mezz, int* tubes ); // mezz->tube[24]
int IsTInMezz ( const char* ChName, int tb, int mezz ); // 1 if tb in that Mezz

// MDT tube to mezzcard channel
class MezzcardMap {
 public:
  MezzcardMap(const int debug=0); //debug=1 => print summary of tubes read
//  Channel returns 10000*CSM + MZ*100 + CH 
//  CSM = CSM number (always 0 except for BME which has CSM=0,1)
//  MZ  = CSM channel used by mezzcard
//  CH  = Channel within the mezzcard
  int Channel( const int mfid );
  int Channel( char *chamber, const int ml, const int ly, const int tb );
  int Channel( char *chamber, const int mllt); // not via mfid
 private:
  std::map<int, int> channelmap;
  std::map<int, int> mllt2csmmzch;
}; 

//  Structure which lists all MDT chambers (some not yet installed, e.g. EES)
//  Includes information on number of ML, layers, tubes, total tubes, etc.
struct chamberlist {
  char calname[9];     //offline name in format <station>_<phi>_<signed eta>
  char hardname[8];    //online/hardware name, e.g EIL1A01
  int  eta;            //signed eta  (+=A, -=C)
  int  phi;            //offline phi
  char station[4];     //station name, e.g. BMS
  int  num_ml;         //number of multilayers
  int  nly_ml1;        //number of layers in ML1
  int  ntl_ml1;        //number of tubes in ML1 
  int  nly_ml2;        //number of layers in M2
  int  ntl_ml2;	       //number of tubes in ML2
  int  n_mezz;         //number of mezzcards
  int  mz0ml;          //ML with mezzcard 0
  int  mzt_ml1;        //mezzcard type in ML1
  int  mzt_ml2;        //mezzcard type in ML2
  float  max_tube_len;   //maximum tube length [mm]
} chlist[] = {
{"BEE_1_1" ,  "BEE1A02",  1, 1, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 1
{"BEE_2_1" ,  "BEE1A04",  1, 2, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 2
{"BEE_3_1" ,  "BEE1A06",  1, 3, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 3
{"BEE_4_1" ,  "BEE1A08",  1, 4, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 4
{"BEE_5_1" ,  "BEE1A10",  1, 5, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 5
{"BEE_6_1" ,  "BEE1A12",  1, 6, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 6
{"BEE_7_1" ,  "BEE1A14",  1, 7, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 7
{"BEE_8_1" ,  "BEE1A16",  1, 8, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 8
{"BEE_1_-1",  "BEE1C02", -1, 1, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 9
{"BEE_2_-1",  "BEE1C04", -1, 2, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 10
{"BEE_3_-1",  "BEE1C06", -1, 3, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 11
{"BEE_4_-1",  "BEE1C08", -1, 4, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 12
{"BEE_5_-1",  "BEE1C10", -1, 5, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 13
{"BEE_6_-1",  "BEE1C12", -1, 6, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 14
{"BEE_7_-1",  "BEE1C14", -1, 7, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 15
{"BEE_8_-1",  "BEE1C16", -1, 8, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 16
{"BEE_1_2" ,  "BEE2A02",  2, 1, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 17
{"BEE_2_2" ,  "BEE2A04",  2, 2, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 18
{"BEE_3_2" ,  "BEE2A06",  2, 3, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 19
{"BEE_4_2" ,  "BEE2A08",  2, 4, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 20
{"BEE_5_2" ,  "BEE2A10",  2, 5, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 21
{"BEE_6_2" ,  "BEE2A12",  2, 6, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 22
{"BEE_7_2" ,  "BEE2A14",  2, 7, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 23
{"BEE_8_2" ,  "BEE2A16",  2, 8, "BEE", 1, 4, 48, 0,  0,  8, 1, 3, 0, 0}, // 24
{"BEE_1_-2",  "BEE2C02", -2, 1, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 25
{"BEE_2_-2",  "BEE2C04", -2, 2, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 26
{"BEE_3_-2",  "BEE2C06", -2, 3, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 27
{"BEE_4_-2",  "BEE2C08", -2, 4, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 28
{"BEE_5_-2",  "BEE2C10", -2, 5, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 29
{"BEE_6_-2",  "BEE2C12", -2, 6, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 30
{"BEE_7_-2",  "BEE2C14", -2, 7, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 31
{"BEE_8_-2",  "BEE2C16", -2, 8, "BEE", 1, 4, 48, 0,  0,  8, 1, 4, 0, 0}, // 32
{"BIL_1_1" ,  "BIL1A01",  1, 1, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 33
{"BIL_2_1" ,  "BIL1A03",  1, 2, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 34
{"BIL_3_1" ,  "BIL1A05",  1, 3, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 35
{"BIL_4_1" ,  "BIL1A07",  1, 4, "BIL", 2, 4, 24, 4, 24,  8, 1, 4, 3, 2625}, // 36
{"BIL_5_1" ,  "BIL1A09",  1, 5, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 37
{"BIL_7_1" ,  "BIL1A13",  1, 7, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 38
{"BIL_1_-1",  "BIL1C01", -1, 1, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 39
{"BIL_2_-1",  "BIL1C03", -1, 2, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 40
{"BIL_3_-1",  "BIL1C05", -1, 3, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 41
{"BIL_4_-1",  "BIL1C07", -1, 4, "BIL", 2, 4, 24, 4, 24, 8 , 2, 3, 4, 2625}, // 42
{"BIL_5_-1",  "BIL1C09", -1, 5, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 43
{"BIL_7_-1",  "BIL1C13", -1, 7, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 44
{"BIL_1_2" ,  "BIL2A01",  2, 1, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 45
{"BIL_2_2" ,  "BIL2A03",  2, 2, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 46
{"BIL_3_2" ,  "BIL2A05",  2, 3, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 47
{"BIL_4_2" ,  "BIL2A07",  2, 4, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 48
{"BIL_5_2" ,  "BIL2A09",  2, 5, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 49
{"BIL_7_2" ,  "BIL2A13",  2, 7, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 50
{"BIL_1_-2",  "BIL2C01", -2, 1, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 51
{"BIL_2_-2",  "BIL2C03", -2, 2, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 52
{"BIL_3_-2",  "BIL2C05", -2, 3, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 53
{"BIL_4_-2",  "BIL2C07", -2, 4, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 54
{"BIL_5_-2",  "BIL2C09", -2, 5, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 55
{"BIL_7_-2",  "BIL2C13", -2, 7, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 56
{"BIL_1_3" ,  "BIL3A01",  3, 1, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 57
{"BIL_2_3" ,  "BIL3A03",  3, 2, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 58
{"BIL_3_3" ,  "BIL3A05",  3, 3, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 59
{"BIL_4_3" ,  "BIL3A07",  3, 4, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 60
{"BIL_5_3" ,  "BIL3A09",  3, 5, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 61
{"BIL_7_3" ,  "BIL3A13",  3, 7, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 62
{"BIL_1_-3",  "BIL3C01", -3, 1, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 63
{"BIL_2_-3",  "BIL3C03", -3, 2, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 64
{"BIL_3_-3",  "BIL3C05", -3, 3, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 65
{"BIL_4_-3",  "BIL3C07", -3, 4, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 66
{"BIL_5_-3",  "BIL3C09", -3, 5, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 67
{"BIL_7_-3",  "BIL3C13", -3, 7, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 68
{"BIL_1_4" ,  "BIL4A01",  4, 1, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 69
{"BIL_2_4" ,  "BIL4A03",  4, 2, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 70
{"BIL_3_4" ,  "BIL4A05",  4, 3, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 71
{"BIL_4_4" ,  "BIL4A07",  4, 4, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 72
{"BIL_5_4" ,  "BIL4A09",  4, 5, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 73
{"BIL_7_4" ,  "BIL4A13",  4, 7, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 74
{"BIL_1_-4",  "BIL4C01", -4, 1, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 75
{"BIL_2_-4",  "BIL4C03", -4, 2, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 76
{"BIL_3_-4",  "BIL4C05", -4, 3, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 77
{"BIL_4_-4",  "BIL4C07", -4, 4, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 78
{"BIL_5_-4",  "BIL4C09", -4, 5, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 79
{"BIL_7_-4",  "BIL4C13", -4, 7, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 80
{"BIL_1_5" ,  "BIL5A01",  5, 1, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 81
{"BIL_2_5" ,  "BIL5A03",  5, 2, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 82
{"BIL_3_5" ,  "BIL5A05",  5, 3, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 83
{"BIL_4_5" ,  "BIL5A07",  5, 4, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 84
{"BIL_5_5" ,  "BIL5A09",  5, 5, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 85
{"BIL_7_5" ,  "BIL5A13",  5, 7, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 86
{"BIL_1_-5",  "BIL5C01", -5, 1, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 87
{"BIL_2_-5",  "BIL5C03", -5, 2, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 88
{"BIL_3_-5",  "BIL5C05", -5, 3, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 89
{"BIL_4_-5",  "BIL5C07", -5, 4, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 90
{"BIL_5_-5",  "BIL5C09", -5, 5, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 91
{"BIL_7_-5",  "BIL5C13", -5, 7, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 92
{"BIL_1_6" ,  "BIL6A01",  6, 1, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 93
{"BIL_2_6" ,  "BIL6A03",  6, 2, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 94
{"BIL_3_6" ,  "BIL6A05",  6, 3, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 95
{"BIL_4_6" ,  "BIL6A07",  6, 4, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 96
{"BIL_5_6" ,  "BIL6A09",  6, 5, "BIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2625}, // 97
{"BIL_7_6" ,  "BIL6A13",  6, 7, "BIL", 2, 4, 30, 4, 30, 10, 1, 4, 3, 2625}, // 98
{"BIL_1_-6",  "BIL6C01", -6, 1, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 99
{"BIL_2_-6",  "BIL6C03", -6, 2, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 100
{"BIL_3_-6",  "BIL6C05", -6, 3, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 101
{"BIL_4_-6",  "BIL6C07", -6, 4, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 102
{"BIL_5_-6",  "BIL6C09", -6, 5, "BIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2625}, // 103
{"BIL_7_-6",  "BIL6C13", -6, 7, "BIL", 2, 4, 30, 4, 30, 10, 2, 3, 4, 2625}, // 104
{"BIM_6_1" ,  "BIM1A11",  1, 6, "BIM", 2, 4, 36, 4, 36, 12, 1, 3, 4, 1500}, // 105
{"BIM_8_1" ,  "BIM1A15",  1, 8, "BIM", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 106
{"BIM_6_-1",  "BIM1C11", -1, 6, "BIM", 2, 4, 36, 4, 36, 12, 2, 4, 3, 1500}, // 107
{"BIM_8_-1",  "BIM1C15", -1, 8, "BIM", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 108
{"BIM_6_2" ,  "BIM2A11",  2, 6, "BIM", 2, 4, 36, 4, 36, 12, 1, 3, 4, 1500}, // 109
{"BIM_8_2" ,  "BIM2A15",  2, 8, "BIM", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 110
{"BIM_6_-2",  "BIM2C11", -2, 6, "BIM", 2, 4, 36, 4, 36, 12, 2, 4, 3, 1500}, // 111
{"BIM_8_-2",  "BIM2C15", -2, 8, "BIM", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 112
{"BIM_6_3" ,  "BIM3A11",  3, 6, "BIM", 2, 4, 36, 4, 36, 12, 1, 3, 4, 1500}, // 113
{"BIM_8_3" ,  "BIM3A15",  3, 8, "BIM", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 114
{"BIM_6_-3",  "BIM3C11", -3, 6, "BIM", 2, 4, 36, 4, 36, 12, 2, 4, 3, 1500}, // 115
{"BIM_8_-3",  "BIM3C15", -3, 8, "BIM", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 116
{"BIM_6_4" ,  "BIM4A11",  4, 6, "BIM", 2, 4, 36, 4, 36, 12, 1, 3, 4, 1500}, // 117
{"BIM_8_4" ,  "BIM4A15",  4, 8, "BIM", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 118
{"BIM_6_-4",  "BIM4C11", -4, 6, "BIM", 2, 4, 36, 4, 36, 12, 2, 4, 3, 1500}, // 119
{"BIM_8_-4",  "BIM4C15", -4, 8, "BIM", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 120
{"BIM_6_5" ,  "BIM5A11",  5, 6, "BIM", 2, 4, 36, 4, 36, 12, 1, 3, 4, 1500}, // 121
{"BIM_8_5" ,  "BIM5A15",  5, 8, "BIM", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 122
{"BIM_6_-5",  "BIM5C11", -5, 6, "BIM", 2, 4, 36, 4, 36, 12, 2, 4, 3, 1500}, // 123
{"BIM_8_-5",  "BIM5C15", -5, 8, "BIM", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 124
{"BIR_6_1" ,  "BIR1A11",  1, 6, "BIR", 2, 4, 24, 4, 30,  9, 1, 3, 4, 2625}, // 125
{"BIR_8_1" ,  "BIR1A15",  1, 8, "BIR", 2, 4, 24, 4, 30,  9, 1, 4, 3, 2625}, // 126
{"BIR_6_-1",  "BIR1C11", -1, 6, "BIR", 2, 4, 24, 4, 30,  9, 2, 4, 3, 2625}, // 127
{"BIR_8_-1",  "BIR1C15", -1, 8, "BIR", 2, 4, 24, 4, 30,  9, 2, 3, 4, 2625}, // 128
{"BIR_6_2" ,  "BIR2A11",  2, 6, "BIR", 2, 4, 27, 4, 30, 10, 1, 3, 4, 1500}, // 129
{"BIR_8_2" ,  "BIR2A15",  2, 8, "BIR", 2, 4, 27, 4, 30, 10, 1, 4, 3, 1500}, // 130
{"BIR_6_-2",  "BIR2C11", -2, 6, "BIR", 2, 4, 27, 4, 30, 10, 2, 4, 3, 1500}, // 131
{"BIR_8_-2",  "BIR2C15", -2, 8, "BIR", 2, 4, 27, 4, 30, 10, 2, 3, 4, 1500}, // 132
{"BIR_6_3" ,  "BIR3A11",  3, 6, "BIR", 2, 4, 33, 4, 33, 12, 1, 3, 4, 1050}, // 133
{"BIR_8_3" ,  "BIR3A15",  3, 8, "BIR", 2, 4, 33, 4, 33, 12, 1, 4, 3, 1050}, // 134
{"BIR_6_-3",  "BIR3C11", -3, 6, "BIR", 2, 4, 33, 4, 33, 12, 2, 4, 3, 1050}, // 135
{"BIR_8_-3",  "BIR3C15", -3, 8, "BIR", 2, 4, 33, 4, 33, 12, 2, 3, 4, 1050}, // 136
{"BIR_6_4" ,  "BIR4A11",  4, 6, "BIR", 2, 4, 27, 4, 30, 10, 1, 3, 4, 1500}, // 137
{"BIR_8_4" ,  "BIR4A15",  4, 8, "BIR", 2, 4, 27, 4, 30, 10, 1, 4, 3, 1500}, // 138
{"BIR_6_-4",  "BIR4C11", -4, 6, "BIR", 2, 4, 27, 4, 30, 10, 2, 4, 3, 1500}, // 139
{"BIR_8_-4",  "BIR4C15", -4, 8, "BIR", 2, 4, 27, 4, 30, 10, 2, 3, 4, 1500}, // 140
{"BIR_6_5" ,  "BIR5A11",  5, 6, "BIR", 2, 4, 21, 4, 24,  8, 1, 3, 4, 1500}, // 141
{"BIR_8_5" ,  "BIR5A15",  5, 8, "BIR", 2, 4, 21, 4, 24,  8, 1, 4, 3, 1500}, // 142
{"BIR_6_-5",  "BIR5C11", -5, 6, "BIR", 2, 4, 21, 4, 24,  8, 2, 4, 3, 1500}, // 143
{"BIR_8_-5",  "BIR5C15", -5, 8, "BIR", 2, 4, 21, 4, 24,  8, 2, 3, 4, 1500}, // 144
{"BIR_6_6" ,  "BIR6A11",  6, 6, "BIR", 2, 4, 36, 4, 36, 12, 1, 3, 4, 1050}, // 145
{"BIR_8_6" ,  "BIR6A15",  6, 8, "BIR", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1050}, // 146
{"BIR_6_-6",  "BIR6C11", -6, 6, "BIR", 2, 4, 36, 4, 36, 12, 2, 4, 3, 1050}, // 147
{"BIR_8_-6",  "BIR6C15", -6, 8, "BIR", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1050}, // 148
{"BIS_1_1" ,  "BIS1A02",  1, 1, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 149
{"BIS_2_1" ,  "BIS1A04",  1, 2, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 150
{"BIS_3_1" ,  "BIS1A06",  1, 3, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 151
{"BIS_4_1" ,  "BIS1A08",  1, 4, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 152
{"BIS_5_1" ,  "BIS1A10",  1, 5, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 153
{"BIS_6_1" ,  "BIS1A12",  1, 6, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 154
{"BIS_7_1" ,  "BIS1A14",  1, 7, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 155
{"BIS_8_1" ,  "BIS1A16",  1, 8, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 156
{"BIS_1_-1",  "BIS1C02", -1, 1, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 157
{"BIS_2_-1",  "BIS1C04", -1, 2, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 158
{"BIS_3_-1",  "BIS1C06", -1, 3, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 159
{"BIS_4_-1",  "BIS1C08", -1, 4, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 160
{"BIS_5_-1",  "BIS1C10", -1, 5, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 161
{"BIS_6_-1",  "BIS1C12", -1, 6, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 162
{"BIS_7_-1",  "BIS1C14", -1, 7, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 163
{"BIS_8_-1",  "BIS1C16", -1, 8, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 164
{"BIS_1_2" ,  "BIS2A02",  2, 1, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 165
{"BIS_2_2" ,  "BIS2A04",  2, 2, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 166
{"BIS_3_2" ,  "BIS2A06",  2, 3, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 167
{"BIS_4_2" ,  "BIS2A08",  2, 4, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 168
{"BIS_5_2" ,  "BIS2A10",  2, 5, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 169
{"BIS_6_2" ,  "BIS2A12",  2, 6, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 170
{"BIS_7_2" ,  "BIS2A14",  2, 7, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 171
{"BIS_8_2" ,  "BIS2A16",  2, 8, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 172
{"BIS_1_-2",  "BIS2C02", -2, 1, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 173
{"BIS_2_-2",  "BIS2C04", -2, 2, "BIS", 2, 4, 30, 4, 30, 10, 2, 4, 3, 1625}, // 174
{"BIS_3_-2",  "BIS2C06", -2, 3, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 175
{"BIS_4_-2",  "BIS2C08", -2, 4, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 176
{"BIS_5_-2",  "BIS2C10", -2, 5, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 177
{"BIS_6_-2",  "BIS2C12", -2, 6, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 178
{"BIS_7_-2",  "BIS2C14", -2, 7, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 179
{"BIS_8_-2",  "BIS2C16", -2, 8, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 180
{"BIS_1_3" ,  "BIS3A02",  3, 1, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 181
{"BIS_2_3" ,  "BIS3A04",  3, 2, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 182
{"BIS_3_3" ,  "BIS3A06",  3, 3, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 183
{"BIS_4_3" ,  "BIS3A08",  3, 4, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 184
{"BIS_5_3" ,  "BIS3A10",  3, 5, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 185
{"BIS_6_3" ,  "BIS3A12",  3, 6, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 186
{"BIS_7_3" ,  "BIS3A14",  3, 7, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 187
{"BIS_8_3" ,  "BIS3A16",  3, 8, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 188
{"BIS_1_-3",  "BIS3C02", -3, 1, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 189
{"BIS_2_-3",  "BIS3C04", -3, 2, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 190
{"BIS_3_-3",  "BIS3C06", -3, 3, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 191
{"BIS_4_-3",  "BIS3C08", -3, 4, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 192
{"BIS_5_-3",  "BIS3C10", -3, 5, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 193
{"BIS_6_-3",  "BIS3C12", -3, 6, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 194
{"BIS_7_-3",  "BIS3C14", -3, 7, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 195
{"BIS_8_-3",  "BIS3C16", -3, 8, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 196
{"BIS_1_4" ,  "BIS4A02",  4, 1, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 197
{"BIS_2_4" ,  "BIS4A04",  4, 2, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 198
{"BIS_3_4" ,  "BIS4A06",  4, 3, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 199
{"BIS_4_4" ,  "BIS4A08",  4, 4, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 200
{"BIS_5_4" ,  "BIS4A10",  4, 5, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 201
{"BIS_6_4" ,  "BIS4A12",  4, 6, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 202
{"BIS_7_4" ,  "BIS4A14",  4, 7, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 203
{"BIS_8_4" ,  "BIS4A16",  4, 8, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 204
{"BIS_1_-4",  "BIS4C02", -4, 1, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 205
{"BIS_2_-4",  "BIS4C04", -4, 2, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 206
{"BIS_3_-4",  "BIS4C06", -4, 3, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 207
{"BIS_4_-4",  "BIS4C08", -4, 4, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 208
{"BIS_5_-4",  "BIS4C10", -4, 5, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 209
{"BIS_6_-4",  "BIS4C12", -4, 6, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 210
{"BIS_7_-4",  "BIS4C14", -4, 7, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 211
{"BIS_8_-4",  "BIS4C16", -4, 8, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 212
{"BIS_1_5" ,  "BIS5A02",  5, 1, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 213
{"BIS_2_5" ,  "BIS5A04",  5, 2, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 214
{"BIS_3_5" ,  "BIS5A06",  5, 3, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 215
{"BIS_4_5" ,  "BIS5A08",  5, 4, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 216
{"BIS_5_5" ,  "BIS5A10",  5, 5, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 217
{"BIS_6_5" ,  "BIS5A12",  5, 6, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 218
{"BIS_7_5" ,  "BIS5A14",  5, 7, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 219
{"BIS_8_5" ,  "BIS5A16",  5, 8, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 220
{"BIS_1_-5",  "BIS5C02", -5, 1, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 221
{"BIS_2_-5",  "BIS5C04", -5, 2, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 222
{"BIS_3_-5",  "BIS5C06", -5, 3, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 223
{"BIS_4_-5",  "BIS5C08", -5, 4, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 224
{"BIS_5_-5",  "BIS5C10", -5, 5, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 225
{"BIS_6_-5",  "BIS5C12", -5, 6, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 226
{"BIS_7_-5",  "BIS5C14", -5, 7, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 227
{"BIS_8_-5",  "BIS5C16", -5, 8, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 228
{"BIS_1_6" ,  "BIS6A02",  6, 1, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 229
{"BIS_2_6" ,  "BIS6A04",  6, 2, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 230
{"BIS_3_6" ,  "BIS6A06",  6, 3, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 231
{"BIS_4_6" ,  "BIS6A08",  6, 4, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 232
{"BIS_5_6" ,  "BIS6A10",  6, 5, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 233
{"BIS_6_6" ,  "BIS6A12",  6, 6, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 234
{"BIS_7_6" ,  "BIS6A14",  6, 7, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 235
{"BIS_8_6" ,  "BIS6A16",  6, 8, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 236
{"BIS_1_-6",  "BIS6C02", -6, 1, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 237
{"BIS_2_-6",  "BIS6C04", -6, 2, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 238
{"BIS_3_-6",  "BIS6C06", -6, 3, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 239
{"BIS_4_-6",  "BIS6C08", -6, 4, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 240
{"BIS_5_-6",  "BIS6C10", -6, 5, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 241
{"BIS_6_-6",  "BIS6C12", -6, 6, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 242
{"BIS_7_-6",  "BIS6C14", -6, 7, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 243
{"BIS_8_-6",  "BIS6C16", -6, 8, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 244
{"BIS_1_7" ,  "BIS7A02",  7, 1, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 245
{"BIS_2_7" ,  "BIS7A04",  7, 2, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 246
{"BIS_3_7" ,  "BIS7A06",  7, 3, "BIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1625}, // 247
{"BIS_4_7" ,  "BIS7A08",  7, 4, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 248
{"BIS_5_7" ,  "BIS7A10",  7, 5, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 249
{"BIS_6_7" ,  "BIS7A12",  7, 6, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 850}, // 250
{"BIS_7_7" ,  "BIS7A14",  7, 7, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 251
{"BIS_8_7" ,  "BIS7A16",  7, 8, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 1625}, // 252
{"BIS_1_-7",  "BIS7C02", -7, 1, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 253
{"BIS_2_-7",  "BIS7C04", -7, 2, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 254
{"BIS_3_-7",  "BIS7C06", -7, 3, "BIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1625}, // 255
{"BIS_4_-7",  "BIS7C08", -7, 4, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 256
{"BIS_5_-7",  "BIS7C10", -7, 5, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 850}, // 257
{"BIS_6_-7",  "BIS7C12", -7, 6, "BIS", 2, 4, 30, 4, 30, 10, 2, 3, 4, 100}, // 258
{"BIS_7_-7",  "BIS7C14", -7, 7, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 850}, // 259
{"BIS_8_-7",  "BIS7C16", -7, 8, "BIS", 2, 4, 30, 4, 30, 10, 1, 4, 3, 1625}, // 260
{"BIS_1_8" ,  "BIS8A02",  8, 1, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 0}, // 261
{"BIS_2_8" ,  "BIS8A04",  8, 2, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 0}, // 262
{"BIS_3_8" ,  "BIS8A06",  8, 3, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 0}, // 263
{"BIS_4_8" ,  "BIS8A08",  8, 4, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 0}, // 264
{"BIS_5_8" ,  "BIS8A10",  8, 5, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 0}, // 265
{"BIS_6_8" ,  "BIS8A12",  8, 6, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 800}, // 266
{"BIS_7_8" ,  "BIS8A14",  8, 7, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 0}, // 267
{"BIS_8_8" ,  "BIS8A16",  8, 8, "BIS", 1, 3, 16, 0,  0,  2, 1, 2, 0, 75}, // 268
{"BIS_1_-8",  "BIS8C02", -8, 1, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 269
{"BIS_2_-8",  "BIS8C04", -8, 2, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 270
{"BIS_3_-8",  "BIS8C06", -8, 3, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 271
{"BIS_4_-8",  "BIS8C08", -8, 4, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 272
{"BIS_5_-8",  "BIS8C10", -8, 5, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 273
{"BIS_6_-8",  "BIS8C12", -8, 6, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 274
{"BIS_7_-8",  "BIS8C14", -8, 7, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 275
{"BIS_8_-8",  "BIS8C16", -8, 8, "BIS", 1, 3, 16, 0,  0,  2, 1, 1, 0, 0}, // 276 sMDT
{"BME_7_1" ,  "BME4A13",  1, 7, "BME", 2, 4, 78, 4, 78, 26, 1, 6, 6, 0}, // 277 sMDT
{"BME_7_-1",  "BME4C13", -1, 7, "BME", 2, 4, 78, 4, 78, 26, 1, 5, 5, 0}, // 278
{"BMF_6_1" ,  "BMF1A12",  1, 6, "BMF", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3025}, // 279
{"BMF_7_1" ,  "BMF1A14",  1, 7, "BMF", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3025}, // 280
{"BMF_6_-1",  "BMF1C12", -1, 6, "BMF", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3025}, // 281
{"BMF_7_-1",  "BMF1C14", -1, 7, "BMF", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3025}, // 282
{"BMF_6_2" ,  "BMF2A12",  2, 6, "BMF", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3025}, // 283
{"BMF_7_2" ,  "BMF2A14",  2, 7, "BMF", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3025}, // 284
{"BMF_6_-2",  "BMF2C12", -2, 6, "BMF", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3025}, // 285
{"BMF_7_-2",  "BMF2C14", -2, 7, "BMF", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3025}, // 286
{"BMF_6_3" ,  "BMF3A12",  3, 6, "BMF", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 287
{"BMF_7_3" ,  "BMF3A14",  3, 7, "BMF", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 288
{"BMF_6_-3",  "BMF3C12", -3, 6, "BMF", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 289
{"BMF_7_-3",  "BMF3C14", -3, 7, "BMF", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 290
{"BML_1_1" ,  "BML1A01",  1, 1, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 291
{"BML_2_1" ,  "BML1A03",  1, 2, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 292
{"BML_3_1" ,  "BML1A05",  1, 3, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 293
{"BML_4_1" ,  "BML1A07",  1, 4, "BML", 2, 3, 32, 3, 32, 8 , 1, 2, 1, 3500}, // 294
{"BML_5_1" ,  "BML1A09",  1, 5, "BML", 2, 3, 32, 3, 32, 8 , 1, 2, 1, 3500}, // 295
{"BML_6_1" ,  "BML1A11",  1, 6, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 296
{"BML_7_1" ,  "BML1A13",  1, 7, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 297
{"BML_8_1" ,  "BML1A15",  1, 8, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 298
{"BML_1_-1",  "BML1C01", -1, 1, "BML", 2, 3, 32, 3, 32, 8 , 2, 1, 2, 3500}, // 299
{"BML_2_-1",  "BML1C03", -1, 2, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 300
{"BML_3_-1",  "BML1C05", -1, 3, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 301
{"BML_4_-1",  "BML1C07", -1, 4, "BML", 2, 3, 32, 3, 32, 8 , 2, 1, 2, 3500}, // 302
{"BML_5_-1",  "BML1C09", -1, 5, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 303
{"BML_6_-1",  "BML1C11", -1, 6, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 304
{"BML_7_-1",  "BML1C13", -1, 7, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 305
{"BML_8_-1",  "BML1C15", -1, 8, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 306
{"BML_1_2" ,  "BML2A01",  2, 1, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 307
{"BML_2_2" ,  "BML2A03",  2, 2, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 308
{"BML_3_2" ,  "BML2A05",  2, 3, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 309
{"BML_4_2" ,  "BML2A07",  2, 4, "BML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 3500}, // 310
{"BML_5_2" ,  "BML2A09",  2, 5, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 311
{"BML_6_2" ,  "BML2A11",  2, 6, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 312
{"BML_7_2" ,  "BML2A13",  2, 7, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 313
{"BML_8_2" ,  "BML2A15",  2, 8, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 314
{"BML_1_-2",  "BML2C01", -2, 1, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 315
{"BML_2_-2",  "BML2C03", -2, 2, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 316
{"BML_3_-2",  "BML2C05", -2, 3, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 317
{"BML_4_-2",  "BML2C07", -2, 4, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 318
{"BML_5_-2",  "BML2C09", -2, 5, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 319
{"BML_6_-2",  "BML2C11", -2, 6, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 320
{"BML_7_-2",  "BML2C13", -2, 7, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 321
{"BML_8_-2",  "BML2C15", -2, 8, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 322
{"BML_1_3" ,  "BML3A01",  3, 1, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 323
{"BML_2_3" ,  "BML3A03",  3, 2, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 324
{"BML_3_3" ,  "BML3A05",  3, 3, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 325
{"BML_4_3" ,  "BML3A07",  3, 4, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 326
{"BML_5_3" ,  "BML3A09",  3, 5, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 327
{"BML_6_3" ,  "BML3A11",  3, 6, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 328
{"BML_7_3" ,  "BML3A13",  3, 7, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 329
{"BML_8_3" ,  "BML3A15",  3, 8, "BML", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3500}, // 330
{"BML_1_-3",  "BML3C01", -3, 1, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 331
{"BML_2_-3",  "BML3C03", -3, 2, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 332
{"BML_3_-3",  "BML3C05", -3, 3, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 333
{"BML_4_-3",  "BML3C07", -3, 4, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 334
{"BML_5_-3",  "BML3C09", -3, 5, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 335
{"BML_6_-3",  "BML3C11", -3, 6, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 336
{"BML_7_-3",  "BML3C13", -3, 7, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 337
{"BML_8_-3",  "BML3C15", -3, 8, "BML", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3500}, // 338
{"BML_1_4" ,  "BML4A01",  4, 1, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 339
{"BML_2_4" ,  "BML4A03",  4, 2, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 340
{"BML_3_4" ,  "BML4A05",  4, 3, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 341
{"BML_4_4" ,  "BML4A07",  4, 4, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 342
{"BML_5_4" ,  "BML4A09",  4, 5, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 343
{"BML_6_4" ,  "BML4A11",  4, 6, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 344
{"BML_8_4" ,  "BML4A15",  4, 8, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 345
{"BML_1_-4",  "BML4C01", -4, 1, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 346
{"BML_2_-4",  "BML4C03", -4, 2, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 347
{"BML_3_-4",  "BML4C05", -4, 3, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 348
{"BML_4_-4",  "BML4C07", -4, 4, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 349
{"BML_5_-4",  "BML4C09", -4, 5, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 350
{"BML_6_-4",  "BML4C11", -4, 6, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 351
{"BML_8_-4",  "BML4C15", -4, 8, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 352
{"BML_1_5" ,  "BML5A01",  5, 1, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 353
{"BML_2_5" ,  "BML5A03",  5, 2, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 354
{"BML_3_5" ,  "BML5A05",  5, 3, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 355
{"BML_4_5" ,  "BML5A07",  5, 4, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 356
{"BML_5_5" ,  "BML5A09",  5, 5, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 357
{"BML_6_5" ,  "BML5A11",  5, 6, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 358
{"BML_7_4" ,  "BML5A13",  4, 7, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 359
{"BML_8_5" ,  "BML5A15",  5, 8, "BML", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3500}, // 360
{"BML_1_-5",  "BML5C01", -5, 1, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 361
{"BML_2_-5",  "BML5C03", -5, 2, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 362
{"BML_3_-5",  "BML5C05", -5, 3, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 363
{"BML_4_-5",  "BML5C07", -5, 4, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 364
{"BML_5_-5",  "BML5C09", -5, 5, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 365
{"BML_6_-5",  "BML5C11", -5, 6, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 366
{"BML_7_-4",  "BML5C13", -4, 7, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 367
{"BML_8_-5",  "BML5C15", -5, 8, "BML", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3500}, // 368
{"BML_1_6" ,  "BML6A01",  6, 1, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 369
{"BML_2_6" ,  "BML6A03",  6, 2, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 370
{"BML_3_6" ,  "BML6A05",  6, 3, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 371
{"BML_4_6" ,  "BML6A07",  6, 4, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 372
{"BML_5_6" ,  "BML6A09",  6, 5, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 373
{"BML_6_6" ,  "BML6A11",  6, 6, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 374
{"BML_7_5" ,  "BML6A13",  5, 7, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 375
{"BML_8_6" ,  "BML6A15",  6, 8, "BML", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3500}, // 376
{"BML_1_-6",  "BML6C01", -6, 1, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 377
{"BML_2_-6",  "BML6C03", -6, 2, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 378
{"BML_3_-6",  "BML6C05", -6, 3, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 379
{"BML_4_-6",  "BML6C07", -6, 4, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 380
{"BML_5_-6",  "BML6C09", -6, 5, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 381
{"BML_6_-6",  "BML6C11", -6, 6, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 382
{"BML_7_-5",  "BML6C13", -5, 7, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 383
{"BML_8_-6",  "BML6C15", -6, 8, "BML", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3500}, // 384
{"BMS_1_1" ,  "BMS1A02",  1, 1, "BMS", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3025}, // 385
{"BMS_2_1" ,  "BMS1A04",  1, 2, "BMS", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3025}, // 386
{"BMS_3_1" ,  "BMS1A06",  1, 3, "BMS", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3025}, // 387
{"BMS_4_1" ,  "BMS1A08",  1, 4, "BMS", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3025}, // 388
{"BMS_5_1" ,  "BMS1A10",  1, 5, "BMS", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3025}, // 389
{"BMS_8_1" ,  "BMS1A16",  1, 8, "BMS", 2, 3, 56, 3, 56, 14, 2, 1, 2, 3025}, // 390
{"BMS_1_-1",  "BMS1C02", -1, 1, "BMS", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3025}, // 391
{"BMS_2_-1",  "BMS1C04", -1, 2, "BMS", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3025}, // 392
{"BMS_3_-1",  "BMS1C06", -1, 3, "BMS", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3025}, // 393
{"BMS_4_-1",  "BMS1C08", -1, 4, "BMS", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3025}, // 394
{"BMS_5_-1",  "BMS1C10", -1, 5, "BMS", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3025}, // 395
{"BMS_8_-1",  "BMS1C16", -1, 8, "BMS", 2, 3, 56, 3, 56, 14, 1, 2, 1, 3025}, // 396
{"BMS_1_2" ,  "BMS2A02",  2, 1, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 397
{"BMS_2_2" ,  "BMS2A04",  2, 2, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 398
{"BMS_3_2" ,  "BMS2A06",  2, 3, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 399
{"BMS_4_2" ,  "BMS2A08",  2, 4, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 400
{"BMS_5_2" ,  "BMS2A10",  2, 5, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 401
{"BMS_8_2" ,  "BMS2A16",  2, 8, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 402
{"BMS_1_-2",  "BMS2C02", -2, 1, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 403
{"BMS_2_-2",  "BMS2C04", -2, 2, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 404
{"BMS_3_-2",  "BMS2C06", -2, 3, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 405
{"BMS_4_-2",  "BMS2C08", -2, 4, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 406
{"BMS_5_-2",  "BMS2C10", -2, 5, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 407
{"BMS_8_-2",  "BMS2C16", -2, 8, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 408
{"BMS_1_3" ,  "BMS3A02",  3, 1, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 409
{"BMS_2_3" ,  "BMS3A04",  3, 2, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 410
{"BMS_3_3" ,  "BMS3A06",  3, 3, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 411
{"BMS_4_3" ,  "BMS3A08",  3, 4, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 412
{"BMS_5_3" ,  "BMS3A10",  3, 5, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 413
{"BMS_8_3" ,  "BMS3A16",  3, 8, "BMS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3025}, // 414
{"BMS_1_-3",  "BMS3C02", -3, 1, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 415
{"BMS_2_-3",  "BMS3C04", -3, 2, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 416
{"BMS_3_-3",  "BMS3C06", -3, 3, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 417
{"BMS_4_-3",  "BMS3C08", -3, 4, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 418
{"BMS_5_-3",  "BMS3C10", -3, 5, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 419
{"BMS_8_-3",  "BMS3C16", -3, 8, "BMS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3025}, // 420
{"BMS_1_4" ,  "BMS4A02",  4, 1, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 421
{"BMS_2_4" ,  "BMS4A04",  4, 2, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 422
{"BMS_3_4" ,  "BMS4A06",  4, 3, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 423
{"BMS_4_4" ,  "BMS4A08",  4, 4, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 424
{"BMS_5_4" ,  "BMS4A10",  4, 5, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 425
{"BMS_8_4" ,  "BMS4A16",  4, 8, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 426
{"BMS_1_-4",  "BMS4C02", -4, 1, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 427
{"BMS_2_-4",  "BMS4C04", -4, 2, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 428
{"BMS_3_-4",  "BMS4C06", -4, 3, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 429
{"BMS_4_-4",  "BMS4C08", -4, 4, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 430
{"BMS_5_-4",  "BMS4C10", -4, 5, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 431
{"BMS_8_-4",  "BMS4C16", -4, 8, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 432
{"BMS_1_5" ,  "BMS5A02",  5, 1, "BMS", 2, 3, 32, 3, 32,  8, 2, 1, 2, 3025}, // 433
{"BMS_2_5" ,  "BMS5A04",  5, 2, "BMS", 2, 3, 32, 3, 32,  8, 2, 1, 2, 3025}, // 434
{"BMS_3_5" ,  "BMS5A06",  5, 3, "BMS", 2, 3, 32, 3, 32,  8, 2, 1, 2, 3025}, // 435
{"BMS_4_5" ,  "BMS5A08",  5, 4, "BMS", 2, 3, 32, 3, 32,  8, 2, 1, 2, 3025}, // 436
{"BMS_5_5" ,  "BMS5A10",  5, 5, "BMS", 2, 3, 32, 3, 32,  8, 2, 1, 2, 3025}, // 437
{"BMS_8_5" ,  "BMS5A16",  5, 8, "BMS", 2, 3, 32, 3, 32,  8, 2, 1, 2, 3025}, // 438
{"BMS_1_-5",  "BMS5C02", -5, 1, "BMS", 2, 3, 32, 3, 32,  8, 1, 2, 1, 3025}, // 439
{"BMS_2_-5",  "BMS5C04", -5, 2, "BMS", 2, 3, 32, 3, 32,  8, 1, 2, 1, 3025}, // 440
{"BMS_3_-5",  "BMS5C06", -5, 3, "BMS", 2, 3, 32, 3, 32,  8, 1, 2, 1, 3025}, // 441
{"BMS_4_-5",  "BMS5C08", -5, 4, "BMS", 2, 3, 32, 3, 32,  8, 1, 2, 1, 3025}, // 442
{"BMS_5_-5",  "BMS5C10", -5, 5, "BMS", 2, 3, 32, 3, 32,  8, 1, 2, 1, 3025}, // 443
{"BMS_8_-5",  "BMS5C16", -5, 8, "BMS", 2, 3, 32, 3, 32,  8, 1, 2, 1, 3025}, // 444
{"BMS_1_6" ,  "BMS6A02",  6, 1, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 445
{"BMS_2_6" ,  "BMS6A04",  6, 2, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 446
{"BMS_3_6" ,  "BMS6A06",  6, 3, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 447
{"BMS_4_6" ,  "BMS6A08",  6, 4, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 448
{"BMS_5_6" ,  "BMS6A10",  6, 5, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 449
{"BMS_8_6" ,  "BMS6A16",  6, 8, "BMS", 2, 3, 40, 3, 48, 11, 2, 1, 2, 3025}, // 450
{"BMS_1_-6",  "BMS6C02", -6, 1, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 451
{"BMS_2_-6",  "BMS6C04", -6, 2, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 452
{"BMS_3_-6",  "BMS6C06", -6, 3, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 453
{"BMS_4_-6",  "BMS6C08", -6, 4, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 454
{"BMS_5_-6",  "BMS6C10", -6, 5, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 455
{"BMS_8_-6",  "BMS6C16", -6, 8, "BMS", 2, 3, 40, 3, 48, 11, 1, 2, 1, 3025}, // 456
{"BOF_6_1" ,  "BOF1A12",  1, 6, "BOF", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 457
{"BOF_7_1" ,  "BOF1A14",  1, 7, "BOF", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 458
{"BOF_6_-1",  "BOF1C12", -1, 6, "BOF", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 459
{"BOF_7_-1",  "BOF1C14", -1, 7, "BOF", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 460
{"BOF_6_2" ,  "BOF3A12",  2, 6, "BOF", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 461
{"BOF_7_2" ,  "BOF3A14",  2, 7, "BOF", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 462
{"BOF_6_-2",  "BOF3C12", -2, 6, "BOF", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 463
{"BOF_7_-2",  "BOF3C14", -2, 7, "BOF", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 464
{"BOF_6_3" ,  "BOF5A12",  3, 6, "BOF", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3725}, // 465
{"BOF_7_3" ,  "BOF5A14",  3, 7, "BOF", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3725}, // 466
{"BOF_6_-3",  "BOF5C12", -3, 6, "BOF", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3725}, // 467
{"BOF_7_-3",  "BOF5C14", -3, 7, "BOF", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3725}, // 468
{"BOF_6_4" ,  "BOF7A12",  4, 6, "BOF", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 469
{"BOF_7_4" ,  "BOF7A14",  4, 7, "BOF", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 470
{"BOF_6_-4",  "BOF7C12", -4, 6, "BOF", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 471
{"BOF_7_-4",  "BOF7C14", -4, 7, "BOF", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 472
{"BOG_6_0" ,  "BOG0A12",  0, 6, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 473
{"BOG_7_0" ,  "BOG0A14",  0, 7, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 2475}, // 474
{"BOG_6_1" ,  "BOG2A12",  1, 6, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 475
{"BOG_7_1" ,  "BOG2A14",  1, 7, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 476
{"BOG_6_-1",  "BOG2C12", -1, 6, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 477
{"BOG_7_-1",  "BOG2C14", -1, 7, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 478
{"BOG_6_2" ,  "BOG4A12",  2, 6, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 479
{"BOG_7_2" ,  "BOG4A14",  2, 7, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 480
{"BOG_6_-2",  "BOG4C12", -2, 6, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 481
{"BOG_7_-2",  "BOG4C14", -2, 7, "BOG", 2, 3, 40, 3, 40, 10, 1, 1, 2, 1875}, // 482
{"BOG_6_3" ,  "BOG6A12",  3, 6, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 483
{"BOG_7_3" ,  "BOG6A14",  3, 7, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3700}, // 484
{"BOG_6_-3",  "BOG6C12", -3, 6, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 485
{"BOG_7_-3",  "BOG6C14", -3, 7, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 486
{"BOG_6_4" ,  "BOG8A12",  4, 6, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 487
{"BOG_7_4" ,  "BOG8A14",  4, 7, "BOG", 2, 3, 40, 3, 40, 10, 2, 1, 2, 3725}, // 488
{"BOG_6_-4",  "BOG8C12", -4, 6, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 489
{"BOG_7_-4",  "BOG8C14", -4, 7, "BOG", 2, 3, 40, 3, 40, 10, 1, 2, 1, 3725}, // 490
{"BOL_1_1" ,  "BOL1A01",  1, 1, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 491
{"BOL_2_1" ,  "BOL1A03",  1, 2, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 492
{"BOL_3_1" ,  "BOL1A05",  1, 3, "BOL", 2, 3, 64, 3, 64, 16, 1, 2, 1, 4925}, // 493
{"BOL_4_1" ,  "BOL1A07",  1, 4, "BOL", 2, 3, 48, 3, 48, 12, 1, 2, 1, 4925}, // 494
{"BOL_5_1" ,  "BOL1A09",  1, 5, "BOL", 2, 3, 48, 3, 48, 12, 1, 2, 1, 4925}, // 495
{"BOL_6_1" ,  "BOL1A11",  1, 6, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 496
{"BOL_7_1" ,  "BOL1A13",  1, 7, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 497
{"BOL_8_1" ,  "BOL1A15",  1, 8, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 498
{"BOL_1_-1",  "BOL1C01", -1, 1, "BOL", 2, 3, 48, 3, 48, 12, 2, 1, 2, 4925}, // 499
{"BOL_2_-1",  "BOL1C03", -1, 2, "BOL", 2, 3, 48, 3, 48, 12, 2, 1, 2, 4925}, // 500
{"BOL_3_-1",  "BOL1C05", -1, 3, "BOL", 2, 3, 48, 3, 48, 12, 2, 1, 2, 4925}, // 501
{"BOL_4_-1",  "BOL1C07", -1, 4, "BOL", 2, 3, 48, 3, 48, 12, 2, 1, 2, 4925}, // 502
{"BOL_5_-1",  "BOL1C09", -1, 5, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 503
{"BOL_6_-1",  "BOL1C11", -1, 6, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 504
{"BOL_7_-1",  "BOL1C13", -1, 7, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 505
{"BOL_8_-1",  "BOL1C15", -1, 8, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 506
{"BOL_1_2" ,  "BOL2A01",  2, 1, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 507
{"BOL_2_2" ,  "BOL2A03",  2, 2, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 508
{"BOL_3_2" ,  "BOL2A05",  2, 3, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 509
{"BOL_4_2" ,  "BOL2A07",  2, 4, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 510
{"BOL_5_2" ,  "BOL2A09",  2, 5, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 511
{"BOL_6_2" ,  "BOL2A11",  2, 6, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 512
{"BOL_7_2" ,  "BOL2A13",  2, 7, "BOL", 2, 3, 48, 3, 48, 12, 1, 2, 1, 4925}, // 513
{"BOL_8_2" ,  "BOL2A15",  2, 8, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 514
{"BOL_1_-2",  "BOL2C01", -2, 1, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 515
{"BOL_2_-2",  "BOL2C03", -2, 2, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 516
{"BOL_3_-2",  "BOL2C05", -2, 3, "BOL", 2, 3, 48, 3, 48, 12, 2, 1, 2, 4925}, // 517
{"BOL_4_-2",  "BOL2C07", -2, 4, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 518
{"BOL_5_-2",  "BOL2C09", -2, 5, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 519
{"BOL_6_-2",  "BOL2C11", -2, 6, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 520
{"BOL_7_-2",  "BOL2C13", -2, 7, "BOL", 2, 3, 48, 3, 48, 12, 2, 1, 2, 4925}, // 521
{"BOL_8_-2",  "BOL2C15", -2, 8, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 522
{"BOL_1_3" ,  "BOL3A01",  3, 1, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 523
{"BOL_2_3" ,  "BOL3A03",  3, 2, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 524
{"BOL_3_3" ,  "BOL3A05",  3, 3, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 525
{"BOL_4_3" ,  "BOL3A07",  3, 4, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 526
{"BOL_5_3" ,  "BOL3A09",  3, 5, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 527
{"BOL_6_3" ,  "BOL3A11",  3, 6, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 528
{"BOL_7_3" ,  "BOL3A13",  3, 7, "BOL", 2, 3, 48, 3, 48, 12, 1, 2, 1, 4925}, // 529
{"BOL_8_3" ,  "BOL3A15",  3, 8, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 530
{"BOL_1_-3",  "BOL3C01", -3, 1, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 531
{"BOL_2_-3",  "BOL3C03", -3, 2, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 532
{"BOL_3_-3",  "BOL3C05", -3, 3, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 533
{"BOL_4_-3",  "BOL3C07", -3, 4, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 534
{"BOL_5_-3",  "BOL3C09", -3, 5, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 535
{"BOL_6_-3",  "BOL3C11", -3, 6, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 536
{"BOL_7_-3",  "BOL3C13", -3, 7, "BOL", 2, 3, 48, 3, 48, 12, 2, 1, 2, 4925}, // 537
{"BOL_8_-3",  "BOL3C15", -3, 8, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 538
{"BOL_1_4" ,  "BOL4A01",  4, 1, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 539
{"BOL_2_4" ,  "BOL4A03",  4, 2, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 540
{"BOL_3_4" ,  "BOL4A05",  4, 3, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 541
{"BOL_4_4" ,  "BOL4A07",  4, 4, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 542
{"BOL_5_4" ,  "BOL4A09",  4, 5, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 543
{"BOL_6_4" ,  "BOL4A11",  4, 6, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 544
{"BOL_7_4" ,  "BOL4A13",  4, 7, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 545
{"BOL_8_4" ,  "BOL4A15",  4, 8, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 546
{"BOL_1_-4",  "BOL4C01", -4, 1, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 547
{"BOL_2_-4",  "BOL4C03", -4, 2, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 548
{"BOL_3_-4",  "BOL4C05", -4, 3, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 549
{"BOL_4_-4",  "BOL4C07", -4, 4, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 550
{"BOL_5_-4",  "BOL4C09", -4, 5, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 551
{"BOL_6_-4",  "BOL4C11", -4, 6, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 552
{"BOL_7_-4",  "BOL4C13", -4, 7, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 553
{"BOL_8_-4",  "BOL4C15", -4, 8, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 554
{"BOL_1_5" ,  "BOL5A01",  5, 1, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 555
{"BOL_2_5" ,  "BOL5A03",  5, 2, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 556
{"BOL_3_5" ,  "BOL5A05",  5, 3, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 557
{"BOL_4_5" ,  "BOL5A07",  5, 4, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 558
{"BOL_5_5" ,  "BOL5A09",  5, 5, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 559
{"BOL_6_5" ,  "BOL5A11",  5, 6, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 560
{"BOL_7_5" ,  "BOL5A13",  5, 7, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 561
{"BOL_8_5" ,  "BOL5A15",  5, 8, "BOL", 2, 3, 72, 3, 72, 18, 1, 2, 1, 4925}, // 562
{"BOL_1_-5",  "BOL5C01", -5, 1, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 563
{"BOL_2_-5",  "BOL5C03", -5, 2, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 564
{"BOL_3_-5",  "BOL5C05", -5, 3, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 565
{"BOL_4_-5",  "BOL5C07", -5, 4, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 566
{"BOL_5_-5",  "BOL5C09", -5, 5, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 567
{"BOL_6_-5",  "BOL5C11", -5, 6, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 568
{"BOL_7_-5",  "BOL5C13", -5, 7, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 569
{"BOL_8_-5",  "BOL5C15", -5, 8, "BOL", 2, 3, 72, 3, 72, 18, 2, 1, 2, 4925}, // 570
{"BOL_1_6" ,  "BOL6A01",  6, 1, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 571
{"BOL_2_6" ,  "BOL6A03",  6, 2, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 572
{"BOL_3_6" ,  "BOL6A05",  6, 3, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 573
{"BOL_4_6" ,  "BOL6A07",  6, 4, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 574
{"BOL_5_6" ,  "BOL6A09",  6, 5, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 575
{"BOL_6_6" ,  "BOL6A11",  6, 6, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 576
{"BOL_7_6" ,  "BOL6A13",  6, 7, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4925}, // 577
{"BOL_8_6" ,  "BOL6A15",  6, 8, "BOL", 2, 3, 56, 3, 56, 14, 1, 2, 1, 4900}, // 578
{"BOL_7_7" ,  "BOE3A13",  7, 7, "BOL", 2, 3, 72, 3, 72, 18, 1, 1, 2, 0}, // 579
{"BOL_1_-6",  "BOL6C01", -6, 1, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 580
{"BOL_2_-6",  "BOL6C03", -6, 2, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 581
{"BOL_3_-6",  "BOL6C05", -6, 3, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 582
{"BOL_4_-6",  "BOL6C07", -6, 4, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 583
{"BOL_5_-6",  "BOL6C09", -6, 5, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 584
{"BOL_6_-6",  "BOL6C11", -6, 6, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4925}, // 585
{"BOL_7_-6",  "BOL6C13", -6, 7, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4900}, // 586
{"BOL_8_-6",  "BOL6C15", -6, 8, "BOL", 2, 3, 56, 3, 56, 14, 2, 1, 2, 4800}, // 587
{"BOL_7_-7",  "BOE3C13", -7, 7, "BOL", 2, 3, 72, 3, 72, 18, 2, 2, 1, 0}, // 588
{"BOS_1_1" ,  "BOS1A02",  1, 1, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 589
{"BOS_2_1" ,  "BOS1A04",  1, 2, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 590
{"BOS_3_1" ,  "BOS1A06",  1, 3, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 591
{"BOS_4_1" ,  "BOS1A08",  1, 4, "BOS", 2, 3, 48, 3, 48, 12, 2, 1, 2, 3725}, // 592
{"BOS_5_1" ,  "BOS1A10",  1, 5, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 593
{"BOS_8_1" ,  "BOS1A16",  1, 8, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 594
{"BOS_1_-1",  "BOS1C02", -1, 1, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 595
{"BOS_2_-1",  "BOS1C04", -1, 2, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 596
{"BOS_3_-1",  "BOS1C06", -1, 3, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 597
{"BOS_4_-1",  "BOS1C08", -1, 4, "BOS", 2, 3, 48, 3, 48, 12, 1, 2, 1, 3725}, // 598
{"BOS_5_-1",  "BOS1C10", -1, 5, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 599
{"BOS_8_-1",  "BOS1C16", -1, 8, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 600
{"BOS_1_2" ,  "BOS2A02",  2, 1, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 601
{"BOS_2_2" ,  "BOS2A04",  2, 2, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 602
{"BOS_3_2" ,  "BOS2A06",  2, 3, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 603
{"BOS_4_2" ,  "BOS2A08",  2, 4, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 604
{"BOS_5_2" ,  "BOS2A10",  2, 5, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 605
{"BOS_8_2" ,  "BOS2A16",  2, 8, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 606
{"BOS_1_-2",  "BOS2C02", -2, 1, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 607
{"BOS_2_-2",  "BOS2C04", -2, 2, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 608
{"BOS_3_-2",  "BOS2C06", -2, 3, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 609
{"BOS_4_-2",  "BOS2C08", -2, 4, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 610
{"BOS_5_-2",  "BOS2C10", -2, 5, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 611
{"BOS_8_-2",  "BOS2C16", -2, 8, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 612
{"BOS_1_3" ,  "BOS3A02",  3, 1, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 613
{"BOS_2_3" ,  "BOS3A04",  3, 2, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 614
{"BOS_3_3" ,  "BOS3A06",  3, 3, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 615
{"BOS_4_3" ,  "BOS3A08",  3, 4, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 616
{"BOS_5_3" ,  "BOS3A10",  3, 5, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 617
{"BOS_8_3" ,  "BOS3A16",  3, 8, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 618
{"BOS_1_-3",  "BOS3C02", -3, 1, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 619
{"BOS_2_-3",  "BOS3C04", -3, 2, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 620
{"BOS_3_-3",  "BOS3C06", -3, 3, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 621
{"BOS_4_-3",  "BOS3C08", -3, 4, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 622
{"BOS_5_-3",  "BOS3C10", -3, 5, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 623
{"BOS_8_-3",  "BOS3C16", -3, 8, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 624
{"BOS_1_4" ,  "BOS4A02",  4, 1, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 625
{"BOS_2_4" ,  "BOS4A04",  4, 2, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 626
{"BOS_3_4" ,  "BOS4A06",  4, 3, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 627
{"BOS_4_4" ,  "BOS4A08",  4, 4, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 628
{"BOS_5_4" ,  "BOS4A10",  4, 5, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 629
{"BOS_8_4" ,  "BOS4A16",  4, 8, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 630
{"BOS_1_-4",  "BOS4C02", -4, 1, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 631
{"BOS_2_-4",  "BOS4C04", -4, 2, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 632
{"BOS_3_-4",  "BOS4C06", -4, 3, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 633
{"BOS_4_-4",  "BOS4C08", -4, 4, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 634
{"BOS_5_-4",  "BOS4C10", -4, 5, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 635
{"BOS_8_-4",  "BOS4C16", -4, 8, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 636
{"BOS_1_5" ,  "BOS5A02",  5, 1, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 637
{"BOS_2_5" ,  "BOS5A04",  5, 2, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 638
{"BOS_3_5" ,  "BOS5A06",  5, 3, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 639
{"BOS_4_5" ,  "BOS5A08",  5, 4, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 640
{"BOS_5_5" ,  "BOS5A10",  5, 5, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 641
{"BOS_8_5" ,  "BOS5A16",  5, 8, "BOS", 2, 3, 72, 3, 72, 18, 2, 1, 2, 3725}, // 642
{"BOS_1_-5",  "BOS5C02", -5, 1, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 643
{"BOS_2_-5",  "BOS5C04", -5, 2, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 644
{"BOS_3_-5",  "BOS5C06", -5, 3, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 645
{"BOS_4_-5",  "BOS5C08", -5, 4, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 646
{"BOS_5_-5",  "BOS5C10", -5, 5, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 647
{"BOS_8_-5",  "BOS5C16", -5, 8, "BOS", 2, 3, 72, 3, 72, 18, 1, 2, 1, 3725}, // 648
{"BOS_1_6" ,  "BOS6A02",  6, 1, "BOS", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 649
{"BOS_2_6" ,  "BOS6A04",  6, 2, "BOS", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 650
{"BOS_3_6" ,  "BOS6A06",  6, 3, "BOS", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 651
{"BOS_4_6" ,  "BOS6A08",  6, 4, "BOS", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 652
{"BOS_5_6" ,  "BOS6A10",  6, 5, "BOS", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 653
{"BOS_8_6" ,  "BOS6A16",  6, 8, "BOS", 2, 3, 64, 3, 64, 16, 2, 1, 2, 3725}, // 654
{"BOS_1_-6",  "BOS6C02", -6, 1, "BOS", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 655
{"BOS_2_-6",  "BOS6C04", -6, 2, "BOS", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 656
{"BOS_3_-6",  "BOS6C06", -6, 3, "BOS", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 657
{"BOS_4_-6",  "BOS6C08", -6, 4, "BOS", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 658
{"BOS_5_-6",  "BOS6C10", -6, 5, "BOS", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 659
{"BOS_8_-6",  "BOS6C16", -6, 8, "BOS", 2, 3, 64, 3, 64, 16, 1, 2, 1, 3725}, // 660 ML1 tube was 48, but this is wrong!
{"EEL_1_1" ,  "EEL1A01",  1, 1, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 661
{"EEL_2_1" ,  "EEL1A03",  1, 2, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 662
{"EEL_4_1" ,  "EEL1A07",  1, 4, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 663
{"EEL_5_1" ,  "EEL1A09",  1, 5, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 664
{"EEL_6_1" ,  "EEL1A11",  1, 6, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 665
{"EEL_7_1" ,  "EEL1A13",  1, 7, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 666
{"EEL_8_1" ,  "EEL1A15",  1, 8, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 667
{"EEL_1_-1",  "EEL1C01", -1, 1, "EEL", 2, 3, 40, 3, 40, 10, 2, 1, 2, 0}, // 668
{"EEL_2_-1",  "EEL1C03", -1, 2, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 669
{"EEL_4_-1",  "EEL1C07", -1, 4, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 670
{"EEL_5_-1",  "EEL1C09", -1, 5, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 671
{"EEL_6_-1",  "EEL1C11", -1, 6, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 672
{"EEL_7_-1",  "EEL1C13", -1, 7, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 673
{"EEL_8_-1",  "EEL1C15", -1, 8, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 674
{"EEL_1_2" ,  "EEL2A01",  2, 1, "EEL", 2, 3, 40, 3, 40, 10, 1, 2, 1, 0}, // 675
{"EEL_2_2" ,  "EEL2A03",  2, 2, "EEL", 2, 3, 40, 3, 40, 10, 1, 2, 1, 0}, // 676
{"EEL_3_1" ,  "EEL2A05",  1, 3, "EEL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 677
{"EEL_4_2" ,  "EEL2A07",  2, 4, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 678
{"EEL_5_2" ,  "EEL2A09",  2, 5, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 679
{"EEL_6_2" ,  "EEL2A11",  2, 6, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 680
{"EEL_7_2" ,  "EEL2A13",  2, 7, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 681
{"EEL_8_2" ,  "EEL2A15",  2, 8, "EEL", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 682
{"EEL_1_-2",  "EEL2C01", -2, 1, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 683
{"EEL_2_-2",  "EEL2C03", -2, 2, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 684
{"EEL_3_-1",  "EEL2C05", -1, 3, "EEL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 685
{"EEL_4_-2",  "EEL2C07", -2, 4, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 686
{"EEL_5_-2",  "EEL2C09", -2, 5, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 687
{"EEL_6_-2",  "EEL2C11", -2, 6, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 688
{"EEL_7_-2",  "EEL2C13", -2, 7, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 689
{"EEL_8_-2",  "EEL2C15", -2, 8, "EEL", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 690
{"EES_1_1" ,  "EES1A02",  1, 1, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 691
{"EES_2_1" ,  "EES1A04",  1, 2, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 692
{"EES_3_1" ,  "EES1A06",  1, 3, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 693
{"EES_4_1" ,  "EES1A08",  1, 4, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 694
{"EES_5_1" ,  "EES1A10",  1, 5, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 695
{"EES_6_1" ,  "EES1A12",  1, 6, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 696
{"EES_7_1" ,  "EES1A14",  1, 7, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 697
{"EES_8_1" ,  "EES1A16",  1, 8, "EES", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 698
{"EES_1_-1" , "EES1C02", -1, 1, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 699
{"EES_2_-1" , "EES1C04", -1, 2, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 700
{"EES_3_-1" , "EES1C06", -1, 3, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 701
{"EES_4_-1" , "EES1C08", -1, 4, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 702
{"EES_5_-1" , "EES1C10", -1, 5, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 703
{"EES_6_-1" , "EES1C12", -1, 6, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 704
{"EES_7_-1" , "EES1C14", -1, 7, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 705
{"EES_8_-1" , "EES1C16", -1, 8, "EES", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 706
{"EES_1_2" ,  "EES2A02",  2, 1, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 707
{"EES_2_2" ,  "EES2A04",  2, 2, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 708
{"EES_3_2" ,  "EES2A06",  2, 3, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 709
{"EES_4_2" ,  "EES2A08",  2, 4, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 710
{"EES_5_2" ,  "EES2A10",  2, 5, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 711
{"EES_6_2" ,  "EES2A12",  2, 6, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 712
{"EES_7_2" ,  "EES2A14",  2, 7, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 713
{"EES_8_2" ,  "EES2A16",  2, 8, "EES", 2, 3, 40, 3, 40, 10, 1, 1, 2, 0}, // 714
{"EES_1_-2" , "EES2C02", -2, 1, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 715
{"EES_2_-2" , "EES2C04", -2, 2, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 716
{"EES_3_-2" , "EES2C06", -2, 3, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 717
{"EES_4_-2" , "EES2C08", -2, 4, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 718
{"EES_5_-2" , "EES2C10", -2, 5, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 719
{"EES_6_-2" , "EES2C12", -2, 6, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 720
{"EES_7_-2" , "EES2C14", -2, 7, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 721
{"EES_8_-2" , "EES2C16", -2, 8, "EES", 2, 3, 40, 3, 40, 10, 2, 2, 1, 0}, // 722
{"EIL_1_1" ,  "EIL1A01",  1, 1, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 723
{"EIL_2_1" ,  "EIL1A03",  1, 2, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 724
{"EIL_3_1" ,  "EIL1A05",  1, 3, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 725
{"EIL_4_1" ,  "EIL1A07",  1, 4, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 726
{"EIL_5_1" ,  "EIL1A09",  1, 5, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 727
{"EIL_6_1" ,  "EIL1A11",  1, 6, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 728
{"EIL_7_1" ,  "EIL1A13",  1, 7, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 729
{"EIL_8_1" ,  "EIL1A15",  1, 8, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1725}, // 730
{"EIL_1_-1",  "EIL1C01", -1, 1, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1350}, // 731
{"EIL_2_-1",  "EIL1C03", -1, 2, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1725}, // 732
{"EIL_3_-1",  "EIL1C05", -1, 3, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1725}, // 733
{"EIL_4_-1",  "EIL1C07", -1, 4, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1725}, // 734
{"EIL_5_-1",  "EIL1C09", -1, 5, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1700}, // 735
{"EIL_6_-1",  "EIL1C11", -1, 6, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1725}, // 736
{"EIL_7_-1",  "EIL1C13", -1, 7, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1725}, // 737
{"EIL_8_-1",  "EIL1C15", -1, 8, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1725}, // 738
{"EIL_1_2" ,  "EIL2A01",  2, 1, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 739
{"EIL_2_2" ,  "EIL2A03",  2, 2, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 740
{"EIL_3_2" ,  "EIL2A05",  2, 3, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 741
{"EIL_4_2" ,  "EIL2A07",  2, 4, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 742
{"EIL_5_2" ,  "EIL2A09",  2, 5, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 743
{"EIL_6_2" ,  "EIL2A11",  2, 6, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 744
{"EIL_7_2" ,  "EIL2A13",  2, 7, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 745
{"EIL_8_2" ,  "EIL2A15",  2, 8, "EIL", 2, 4, 36, 4, 36, 12, 2, 3, 4, 2275}, // 746
{"EIL_1_-2",  "EIL2C01", -2, 1, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 747
{"EIL_2_-2",  "EIL2C03", -2, 2, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 748
{"EIL_3_-2",  "EIL2C05", -2, 3, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 749
{"EIL_4_-2",  "EIL2C07", -2, 4, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 750
{"EIL_5_-2",  "EIL2C09", -2, 5, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 751
{"EIL_6_-2",  "EIL2C11", -2, 6, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 752
{"EIL_7_-2",  "EIL2C13", -2, 7, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 753
{"EIL_8_-2",  "EIL2C15", -2, 8, "EIL", 2, 4, 36, 4, 36, 12, 1, 4, 3, 2275}, // 754
{"EIL_1_3" ,  "EIL3A01",  3, 1, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 2025}, // 755
{"EIL_2_3" ,  "EIL3A03",  3, 2, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 2025}, // 756
{"EIL_3_3" ,  "EIL3A05",  3, 3, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 2025}, // 757
{"EIL_4_3" ,  "EIL3A07",  3, 4, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 2025}, // 758
{"EIL_5_3" ,  "EIL3A09",  3, 5, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 2025}, // 759
{"EIL_6_3" ,  "EIL3A11",  3, 6, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 1700}, // 760
{"EIL_7_3" ,  "EIL3A13",  3, 7, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 2025}, // 761
{"EIL_8_3" ,  "EIL3A15",  3, 8, "EIL", 2, 4, 12, 4, 12,  4, 2, 3, 4, 1700}, // 762
{"EIL_1_-3",  "EIL3C01", -3, 1, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 2025}, // 763
{"EIL_2_-3",  "EIL3C03", -3, 2, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 2025}, // 764
{"EIL_3_-3",  "EIL3C05", -3, 3, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 2025}, // 765
{"EIL_4_-3",  "EIL3C07", -3, 4, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 2025}, // 766
{"EIL_5_-3",  "EIL3C09", -3, 5, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 2025}, // 767
{"EIL_6_-3",  "EIL3C11", -3, 6, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 1700}, // 768
{"EIL_7_-3",  "EIL3C13", -3, 7, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 2025}, // 769
{"EIL_8_-3",  "EIL3C15", -3, 8, "EIL", 2, 4, 12, 4, 12,  4, 1, 4, 3, 1700}, // 770
{"EIL_1_4" ,  "EIL4A01",  4, 1, "EIL", 2, 4, 12, 4, 12,  4, 1, 5, 6, 1500}, // 771
{"EIL_2_4" ,  "EIL4A03",  4, 2, "EIL", 2, 4, 54, 4, 54, 18, 1, 4, 3, 3025}, // 772
{"EIL_3_4" ,  "EIL4A05",  4, 3, "EIL", 2, 4, 54, 4, 54, 18, 1, 4, 3, 3025}, // 773
{"EIL_4_4" ,  "EIL4A07",  4, 4, "EIL", 2, 4, 54, 4, 54, 18, 1, 4, 3, 2325}, // 774
{"EIL_5_4" ,  "EIL4A09",  4, 5, "EIL", 2, 4, 12, 4, 12, 4 , 1, 5, 6, 1500}, // 775
{"EIL_6_4" ,  "EIL4A11",  4, 6, "EIL", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1775}, // 776
{"EIL_7_4" ,  "EIL4A13",  4, 7, "EIL", 2, 4, 54, 4, 54, 18, 1, 4, 3, 3025}, // 777
{"EIL_8_4" ,  "EIL4A15",  4, 8, "EIL", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1775}, // 778
{"EIL_1_-4",  "EIL4C01", -4, 1, "EIL", 2, 4, 12, 4, 12, 4 , 2, 5, 6, 1500}, // 779
{"EIL_2_-4",  "EIL4C03", -4, 2, "EIL", 2, 4, 54, 4, 54, 18, 2, 3, 4, 3025}, // 780
{"EIL_3_-4",  "EIL4C05", -4, 3, "EIL", 2, 4, 54, 4, 54, 18, 2, 3, 4, 3025}, // 781
{"EIL_4_-4",  "EIL4C07", -4, 4, "EIL", 2, 4, 54, 4, 54, 18, 2, 3, 4, 2325}, // 782
{"EIL_5_-4",  "EIL4C09", -4, 5, "EIL", 2, 4, 12, 4, 12, 4 , 2, 5, 6, 1500}, // 783
{"EIL_6_-4",  "EIL4C11", -4, 6, "EIL", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1775}, // 784
{"EIL_7_-4",  "EIL4C13", -4, 7, "EIL", 2, 4, 54, 4, 54, 18, 2, 3, 4, 3025}, // 785
{"EIL_8_-4",  "EIL4C15", -4, 8, "EIL", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1775}, // 786
{"EIL_1_5" ,  "EIL5A01",  5, 1, "EIL", 2, 4, 42, 4, 42, 14, 1, 4, 3, 2675}, // 787
{"EIL_5_5" ,  "EIL5A09",  5, 5, "EIL", 2, 4, 42, 4, 42, 14, 1, 4, 3, 2750}, // 788
{"EIL_1_-5",  "EIL5C01", -5, 1, "EIL", 2, 4, 42, 4, 42, 14, 2, 3, 4, 3025}, // 789
{"EIL_5_-5",  "EIL5C09", -5, 5, "EIL", 2, 4, 42, 4, 42, 14, 2, 3, 4, 3025}, // 790
{"EIS_1_1" ,  "EIS1A02",  1, 1, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 791
{"EIS_2_1" ,  "EIS1A04",  1, 2, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 792
{"EIS_3_1" ,  "EIS1A06",  1, 3, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 793
{"EIS_4_1" ,  "EIS1A08",  1, 4, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 794
{"EIS_5_1" ,  "EIS1A10",  1, 5, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 795
{"EIS_6_1" ,  "EIS1A12",  1, 6, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 796
{"EIS_7_1" ,  "EIS1A14",  1, 7, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 797
{"EIS_8_1" ,  "EIS1A16",  1, 8, "EIS", 2, 4, 42, 4, 42, 14, 1, 4, 3, 1175}, // 798
{"EIS_1_-1",  "EIS1C02", -1, 1, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 799
{"EIS_2_-1",  "EIS1C04", -1, 2, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 800
{"EIS_3_-1",  "EIS1C06", -1, 3, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 801
{"EIS_4_-1",  "EIS1C08", -1, 4, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 802
{"EIS_5_-1",  "EIS1C10", -1, 5, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 803
{"EIS_6_-1",  "EIS1C12", -1, 6, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 804
{"EIS_7_-1",  "EIS1C14", -1, 7, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 805
{"EIS_8_-1",  "EIS1C16", -1, 8, "EIS", 2, 4, 42, 4, 42, 14, 2, 3, 4, 1175}, // 806
{"EIS_1_2" ,  "EIS2A02",  2, 1, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 807
{"EIS_2_2" ,  "EIS2A04",  2, 2, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 808
{"EIS_3_2" ,  "EIS2A06",  2, 3, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 809
{"EIS_4_2" ,  "EIS2A08",  2, 4, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 810
{"EIS_5_2" ,  "EIS2A10",  2, 5, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 811
{"EIS_6_2" ,  "EIS2A12",  2, 6, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 812
{"EIS_7_2" ,  "EIS2A14",  2, 7, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 813
{"EIS_8_2" ,  "EIS2A16",  2, 8, "EIS", 2, 4, 36, 4, 36, 12, 1, 4, 3, 1500}, // 814
{"EIS_1_-2",  "EIS2C02", -2, 1, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 815
{"EIS_2_-2",  "EIS2C04", -2, 2, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 816
{"EIS_3_-2",  "EIS2C06", -2, 3, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 817
{"EIS_4_-2",  "EIS2C08", -2, 4, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 818
{"EIS_5_-2",  "EIS2C10", -2, 5, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 819
{"EIS_6_-2",  "EIS2C12", -2, 6, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 820
{"EIS_7_-2",  "EIS2C14", -2, 7, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 821
{"EIS_8_-2",  "EIS2C16", -2, 8, "EIS", 2, 4, 36, 4, 36, 12, 2, 3, 4, 1500}, // 822
{"EML_1_1" ,  "EML1A01",  1, 1, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 823
{"EML_2_1" ,  "EML1A03",  1, 2, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 824
{"EML_3_1" ,  "EML1A05",  1, 3, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 825
{"EML_4_1" ,  "EML1A07",  1, 4, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 826
{"EML_5_1" ,  "EML1A09",  1, 5, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 827
{"EML_6_1" ,  "EML1A11",  1, 6, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 828
{"EML_7_1" ,  "EML1A13",  1, 7, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 829
{"EML_8_1" ,  "EML1A15",  1, 8, "EML", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 830
{"EML_1_-1",  "EML1C01", -1, 1, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 831
{"EML_2_-1",  "EML1C03", -1, 2, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 832
{"EML_3_-1",  "EML1C05", -1, 3, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 833
{"EML_4_-1",  "EML1C07", -1, 4, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 834
{"EML_5_-1",  "EML1C09", -1, 5, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 835
{"EML_6_-1",  "EML1C11", -1, 6, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 836
{"EML_7_-1",  "EML1C13", -1, 7, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 837
{"EML_8_-1",  "EML1C15", -1, 8, "EML", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 838
{"EML_1_2" ,  "EML2A01",  2, 1, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 839
{"EML_2_2" ,  "EML2A03",  2, 2, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 840
{"EML_3_2" ,  "EML2A05",  2, 3, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 841
{"EML_4_2" ,  "EML2A07",  2, 4, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 842
{"EML_5_2" ,  "EML2A09",  2, 5, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 843
{"EML_6_2" ,  "EML2A11",  2, 6, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 844
{"EML_7_2" ,  "EML2A13",  2, 7, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 845
{"EML_8_2" ,  "EML2A15",  2, 8, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 846
{"EML_1_-2",  "EML2C01", -2, 1, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 847
{"EML_2_-2",  "EML2C03", -2, 2, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 848
{"EML_3_-2",  "EML2C05", -2, 3, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 849
{"EML_4_-2",  "EML2C07", -2, 4, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 850
{"EML_5_-2",  "EML2C09", -2, 5, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 1250}, // 851
{"EML_6_-2",  "EML2C11", -2, 6, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2825}, // 852
{"EML_7_-2",  "EML2C13", -2, 7, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 853
{"EML_8_-2",  "EML2C15", -2, 8, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 854
{"EML_1_3" ,  "EML3A01",  3, 1, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 855
{"EML_2_3" ,  "EML3A03",  3, 2, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 856
{"EML_3_3" ,  "EML3A05",  3, 3, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 857
{"EML_4_3" ,  "EML3A07",  3, 4, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 858
{"EML_5_3" ,  "EML3A09",  3, 5, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 859
{"EML_6_3" ,  "EML3A11",  3, 6, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 860
{"EML_7_3" ,  "EML3A13",  3, 7, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 861
{"EML_8_3" ,  "EML3A15",  3, 8, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3775}, // 862
{"EML_1_-3",  "EML3C01", -3, 1, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 863
{"EML_2_-3",  "EML3C03", -3, 2, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 864
{"EML_3_-3",  "EML3C05", -3, 3, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 865
{"EML_4_-3",  "EML3C07", -3, 4, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 866
{"EML_5_-3",  "EML3C09", -3, 5, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 867
{"EML_6_-3",  "EML3C11", -3, 6, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 868
{"EML_7_-3",  "EML3C13", -3, 7, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 869
{"EML_8_-3",  "EML3C15", -3, 8, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3775}, // 870
{"EML_1_4" ,  "EML4A01",  4, 1, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 871
{"EML_2_4" ,  "EML4A03",  4, 2, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 872
{"EML_3_4" ,  "EML4A05",  4, 3, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 873
{"EML_4_4" ,  "EML4A07",  4, 4, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 874
{"EML_5_4" ,  "EML4A09",  4, 5, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 875
{"EML_6_4" ,  "EML4A11",  4, 6, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 876
{"EML_7_4" ,  "EML4A13",  4, 7, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 877
{"EML_8_4" ,  "EML4A15",  4, 8, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 4750}, // 878
{"EML_1_-4",  "EML4C01", -4, 1, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 879
{"EML_2_-4",  "EML4C03", -4, 2, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 880
{"EML_3_-4",  "EML4C05", -4, 3, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 881
{"EML_4_-4",  "EML4C07", -4, 4, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 882
{"EML_5_-4",  "EML4C09", -4, 5, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 883
{"EML_6_-4",  "EML4C11", -4, 6, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 884
{"EML_7_-4",  "EML4C13", -4, 7, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 885
{"EML_8_-4",  "EML4C15", -4, 8, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 4750}, // 886
{"EML_1_5" ,  "EML5A01",  5, 1, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5700}, // 887
{"EML_2_5" ,  "EML5A03",  5, 2, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5600}, // 888
{"EML_3_5" ,  "EML5A05",  5, 3, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5700}, // 889
{"EML_4_5" ,  "EML5A07",  5, 4, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5575}, // 890
{"EML_5_5" ,  "EML5A09",  5, 5, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5575}, // 891
{"EML_6_5" ,  "EML5A11",  5, 6, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5700}, // 892
{"EML_7_5" ,  "EML5A13",  5, 7, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5575}, // 893
{"EML_8_5" ,  "EML5A15",  5, 8, "EML", 2, 3, 64, 3, 64, 16, 2, 2, 1, 5575}, // 894
{"EML_1_-5",  "EML5C01", -5, 1, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5575}, // 895
{"EML_2_-5",  "EML5C03", -5, 2, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5575}, // 896
{"EML_3_-5",  "EML5C05", -5, 3, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5700}, // 897
{"EML_4_-5",  "EML5C07", -5, 4, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5700}, // 898
{"EML_5_-5",  "EML5C09", -5, 5, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5575}, // 899
{"EML_6_-5",  "EML5C11", -5, 6, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5575}, // 900
{"EML_7_-5",  "EML5C13", -5, 7, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5575}, // 901
{"EML_8_-5",  "EML5C15", -5, 8, "EML", 2, 3, 64, 3, 64, 16, 1, 1, 2, 5575}, // 902
{"EMS_1_1" ,  "EMS1A02",  1, 1, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 903
{"EMS_2_1" ,  "EMS1A04",  1, 2, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 904
{"EMS_3_1" ,  "EMS1A06",  1, 3, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 905
{"EMS_4_1" ,  "EMS1A08",  1, 4, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 906
{"EMS_5_1" ,  "EMS1A10",  1, 5, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 907
{"EMS_6_1" ,  "EMS1A12",  1, 6, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 908
{"EMS_7_1" ,  "EMS1A14",  1, 7, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 909
{"EMS_8_1" ,  "EMS1A16",  1, 8, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 910
{"EMS_1_-1",  "EMS1C02", -1, 1, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 911
{"EMS_2_-1",  "EMS1C04", -1, 2, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 912
{"EMS_3_-1",  "EMS1C06", -1, 3, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 913
{"EMS_4_-1",  "EMS1C08", -1, 4, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 914
{"EMS_5_-1",  "EMS1C10", -1, 5, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 1300}, // 915
{"EMS_6_-1",  "EMS1C12", -1, 6, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 916
{"EMS_7_-1",  "EMS1C14", -1, 7, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 917
{"EMS_8_-1",  "EMS1C16", -1, 8, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 918
{"EMS_1_2" ,  "EMS2A02",  2, 1, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 919
{"EMS_2_2" ,  "EMS2A04",  2, 2, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 920
{"EMS_3_2" ,  "EMS2A06",  2, 3, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 921
{"EMS_4_2" ,  "EMS2A08",  2, 4, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 922
{"EMS_5_2" ,  "EMS2A10",  2, 5, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 923
{"EMS_6_2" ,  "EMS2A12",  2, 6, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 924
{"EMS_7_2" ,  "EMS2A14",  2, 7, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 925
{"EMS_8_2" ,  "EMS2A16",  2, 8, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 0}, // 926
{"EMS_1_-2",  "EMS2C02", -2, 1, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 927
{"EMS_2_-2",  "EMS2C04", -2, 2, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 928
{"EMS_3_-2",  "EMS2C06", -2, 3, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 929
{"EMS_4_-2",  "EMS2C08", -2, 4, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 930
{"EMS_5_-2",  "EMS2C10", -2, 5, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 1875}, // 931
{"EMS_6_-2",  "EMS2C12", -2, 6, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 932
{"EMS_7_-2",  "EMS2C14", -2, 7, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 933
{"EMS_8_-2",  "EMS2C16", -2, 8, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 0}, // 934
{"EMS_1_3" ,  "EMS3A02",  3, 1, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 935
{"EMS_2_3" ,  "EMS3A04",  3, 2, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 936
{"EMS_3_3" ,  "EMS3A06",  3, 3, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 937
{"EMS_4_3" ,  "EMS3A08",  3, 4, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 938
{"EMS_5_3" ,  "EMS3A10",  3, 5, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 939
{"EMS_6_3" ,  "EMS3A12",  3, 6, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 940
{"EMS_7_3" ,  "EMS3A14",  3, 7, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 941
{"EMS_8_3" ,  "EMS3A16",  3, 8, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 2450}, // 942
{"EMS_1_-3",  "EMS3C02", -3, 1, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 943
{"EMS_2_-3",  "EMS3C04", -3, 2, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 944
{"EMS_3_-3",  "EMS3C06", -3, 3, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 945
{"EMS_4_-3",  "EMS3C08", -3, 4, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 946
{"EMS_5_-3",  "EMS3C10", -3, 5, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 947
{"EMS_6_-3",  "EMS3C12", -3, 6, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 948
{"EMS_7_-3",  "EMS3C14", -3, 7, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 949
{"EMS_8_-3",  "EMS3C16", -3, 8, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 2450}, // 950
{"EMS_1_4" ,  "EMS4A02",  4, 1, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 951
{"EMS_2_4" ,  "EMS4A04",  4, 2, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 952
{"EMS_3_4" ,  "EMS4A06",  4, 3, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 953
{"EMS_4_4" ,  "EMS4A08",  4, 4, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 954
{"EMS_5_4" ,  "EMS4A10",  4, 5, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 955
{"EMS_6_4" ,  "EMS4A12",  4, 6, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 956
{"EMS_7_4" ,  "EMS4A14",  4, 7, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 957
{"EMS_8_4" ,  "EMS4A16",  4, 8, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3025}, // 958
{"EMS_1_-4",  "EMS4C02", -4, 1, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 959
{"EMS_2_-4",  "EMS4C04", -4, 2, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 960
{"EMS_3_-4",  "EMS4C06", -4, 3, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 961
{"EMS_4_-4",  "EMS4C08", -4, 4, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 962
{"EMS_5_-4",  "EMS4C10", -4, 5, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 963
{"EMS_6_-4",  "EMS4C12", -4, 6, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 964
{"EMS_7_-4",  "EMS4C14", -4, 7, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 965
{"EMS_8_-4",  "EMS4C16", -4, 8, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3025}, // 966
{"EMS_1_5" ,  "EMS5A02",  5, 1, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3450}, // 967
{"EMS_2_5" ,  "EMS5A04",  5, 2, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3450}, // 968
{"EMS_3_5" ,  "EMS5A06",  5, 3, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3600}, // 969
{"EMS_4_5" ,  "EMS5A08",  5, 4, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3450}, // 970
{"EMS_5_5" ,  "EMS5A10",  5, 5, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3450}, // 971
{"EMS_6_5" ,  "EMS5A12",  5, 6, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3450}, // 972
{"EMS_7_5" ,  "EMS5A14",  5, 7, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3450}, // 973
{"EMS_8_5" ,  "EMS5A16",  5, 8, "EMS", 2, 3, 64, 3, 64, 16, 1, 1, 2, 3450}, // 974
{"EMS_1_-5",  "EMS5C02", -5, 1, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3450}, // 975
{"EMS_2_-5",  "EMS5C04", -5, 2, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3375}, // 976
{"EMS_3_-5",  "EMS5C06", -5, 3, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3450}, // 977
{"EMS_4_-5",  "EMS5C08", -5, 4, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3450}, // 978
{"EMS_5_-5",  "EMS5C10", -5, 5, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3450}, // 979
{"EMS_6_-5",  "EMS5C12", -5, 6, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3450}, // 980
{"EMS_7_-5",  "EMS5C14", -5, 7, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3450}, // 981
{"EMS_8_-5",  "EMS5C16", -5, 8, "EMS", 2, 3, 64, 3, 64, 16, 2, 2, 1, 3450}, // 982
{"EOL_1_1" ,  "EOL1A01",  1, 1, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 983
{"EOL_2_1" ,  "EOL1A03",  1, 2, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 984
{"EOL_3_1" ,  "EOL1A05",  1, 3, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 985
{"EOL_4_1" ,  "EOL1A07",  1, 4, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 986
{"EOL_5_1" ,  "EOL1A09",  1, 5, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 987
{"EOL_6_1" ,  "EOL1A11",  1, 6, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 988
{"EOL_7_1" ,  "EOL1A13",  1, 7, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 989
{"EOL_8_1" ,  "EOL1A15",  1, 8, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 990
{"EOL_1_-1",  "EOL1C01", -1, 1, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 991
{"EOL_2_-1",  "EOL1C03", -1, 2, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 992
{"EOL_3_-1",  "EOL1C05", -1, 3, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 993
{"EOL_4_-1",  "EOL1C07", -1, 4, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 994
{"EOL_5_-1",  "EOL1C09", -1, 5, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 995
{"EOL_6_-1",  "EOL1C11", -1, 6, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 2175}, // 996
{"EOL_7_-1",  "EOL1C13", -1, 7, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 997
{"EOL_8_-1",  "EOL1C15", -1, 8, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 998
{"EOL_1_2" ,  "EOL2A01",  2, 1, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 999
{"EOL_2_2" ,  "EOL2A03",  2, 2, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1000
{"EOL_3_2" ,  "EOL2A05",  2, 3, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1001
{"EOL_4_2" ,  "EOL2A07",  2, 4, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1002
{"EOL_5_2" ,  "EOL2A09",  2, 5, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1003
{"EOL_6_2" ,  "EOL2A11",  2, 6, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1004
{"EOL_7_2" ,  "EOL2A13",  2, 7, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1005
{"EOL_8_2" ,  "EOL2A15",  2, 8, "EOL", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1006
{"EOL_1_-2",  "EOL2C01", -2, 1, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1007
{"EOL_2_-2",  "EOL2C03", -2, 2, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1008
{"EOL_3_-2",  "EOL2C05", -2, 3, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1009
{"EOL_4_-2",  "EOL2C07", -2, 4, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1010
{"EOL_5_-2",  "EOL2C09", -2, 5, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 1425}, // 1011
{"EOL_6_-2",  "EOL2C11", -2, 6, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 3325}, // 1012
{"EOL_7_-2",  "EOL2C13", -2, 7, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1013
{"EOL_8_-2",  "EOL2C15", -2, 8, "EOL", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1014
{"EOL_1_3" ,  "EOL3A01",  3, 1, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 1425}, // 1015
{"EOL_2_3" ,  "EOL3A03",  3, 2, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 2275}, // 1016
{"EOL_3_3" ,  "EOL3A05",  3, 3, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 1017
{"EOL_4_3" ,  "EOL3A07",  3, 4, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 1018
{"EOL_5_3" ,  "EOL3A09",  3, 5, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 1019
{"EOL_6_3" ,  "EOL3A11",  3, 6, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 1020
{"EOL_7_3" ,  "EOL3A13",  3, 7, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 2000}, // 1021
{"EOL_8_3" ,  "EOL3A15",  3, 8, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 0}, // 1022
{"EOL_1_-3",  "EOL3C01", -3, 1, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 1023
{"EOL_2_-3",  "EOL3C03", -3, 2, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 1024
{"EOL_3_-3",  "EOL3C05", -3, 3, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 1025
{"EOL_4_-3",  "EOL3C07", -3, 4, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 1026
{"EOL_5_-3",  "EOL3C09", -3, 5, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 1675}, // 1027
{"EOL_6_-3",  "EOL3C11", -3, 6, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4025}, // 1028
{"EOL_7_-3",  "EOL3C13", -3, 7, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 1029
{"EOL_8_-3",  "EOL3C15", -3, 8, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 0}, // 1030
{"EOL_1_4" ,  "EOL4A01",  4, 1, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4425}, // 1031
{"EOL_2_4" ,  "EOL4A03",  4, 2, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4675}, // 1032
{"EOL_3_4" ,  "EOL4A05",  4, 3, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4700}, // 1033
{"EOL_4_4" ,  "EOL4A07",  4, 4, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4275}, // 1034
{"EOL_5_4" ,  "EOL4A09",  4, 5, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4625}, // 1035
{"EOL_6_4" ,  "EOL4A11",  4, 6, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4750}, // 1036
{"EOL_7_4" ,  "EOL4A13",  4, 7, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4525}, // 1037
{"EOL_8_4" ,  "EOL4A15",  4, 8, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 4750}, // 1038
{"EOL_1_-4",  "EOL4C01", -4, 1, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4625}, // 1039
{"EOL_2_-4",  "EOL4C03", -4, 2, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4400}, // 1040
{"EOL_3_-4",  "EOL4C05", -4, 3, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4675}, // 1041
{"EOL_4_-4",  "EOL4C07", -4, 4, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4625}, // 1042
{"EOL_5_-4",  "EOL4C09", -4, 5, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4250}, // 1043
{"EOL_6_-4",  "EOL4C11", -4, 6, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4750}, // 1044
{"EOL_7_-4",  "EOL4C13", -4, 7, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4250}, // 1045
{"EOL_8_-4",  "EOL4C15", -4, 8, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 4275}, // 1046
{"EOL_1_5" ,  "EOL5A01",  5, 1, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1047
{"EOL_2_5" ,  "EOL5A03",  5, 2, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1048
{"EOL_3_5" ,  "EOL5A05",  5, 3, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1049
{"EOL_4_5" ,  "EOL5A07",  5, 4, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1050
{"EOL_5_5" ,  "EOL5A09",  5, 5, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1051
{"EOL_6_5" ,  "EOL5A11",  5, 6, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1052
{"EOL_7_5" ,  "EOL5A13",  5, 7, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1053
{"EOL_8_5" ,  "EOL5A15",  5, 8, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 5475}, // 1054
{"EOL_1_-5",  "EOL5C01", -5, 1, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1055
{"EOL_2_-5",  "EOL5C03", -5, 2, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1056
{"EOL_3_-5",  "EOL5C05", -5, 3, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1057
{"EOL_4_-5",  "EOL5C07", -5, 4, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1058
{"EOL_5_-5",  "EOL5C09", -5, 5, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1059
{"EOL_6_-5",  "EOL5C11", -5, 6, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1060
{"EOL_7_-5",  "EOL5C13", -5, 7, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1061
{"EOL_8_-5",  "EOL5C15", -5, 8, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 5475}, // 1062
{"EOL_1_6" ,  "EOL6A01",  6, 1, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1063
{"EOL_2_6" ,  "EOL6A03",  6, 2, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1064
{"EOL_3_6" ,  "EOL6A05",  6, 3, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1065
{"EOL_4_6" ,  "EOL6A07",  6, 4, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1066
{"EOL_5_6" ,  "EOL6A09",  6, 5, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1067
{"EOL_6_6" ,  "EOL6A11",  6, 6, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1068
{"EOL_7_6" ,  "EOL6A13",  6, 7, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1069
{"EOL_8_6" ,  "EOL6A15",  6, 8, "EOL", 2, 3, 48, 3, 48, 12, 2, 2, 1, 6200}, // 1070
{"EOL_1_-6",  "EOL6C01", -6, 1, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1071
{"EOL_2_-6",  "EOL6C03", -6, 2, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1072
{"EOL_3_-6",  "EOL6C05", -6, 3, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1073
{"EOL_4_-6",  "EOL6C07", -6, 4, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1074
{"EOL_5_-6",  "EOL6C09", -6, 5, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1075
{"EOL_6_-6",  "EOL6C11", -6, 6, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1076
{"EOL_7_-6",  "EOL6C13", -6, 7, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1077
{"EOL_8_-6",  "EOL6C15", -6, 8, "EOL", 2, 3, 48, 3, 48, 12, 1, 1, 2, 6200}, // 1078
{"EOS_1_1" ,  "EOS1A02",  1, 1, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1079
{"EOS_2_1" ,  "EOS1A04",  1, 2, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1080
{"EOS_3_1" ,  "EOS1A06",  1, 3, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1081
{"EOS_4_1" ,  "EOS1A08",  1, 4, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1082
{"EOS_5_1" ,  "EOS1A10",  1, 5, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1083
{"EOS_6_1" ,  "EOS1A12",  1, 6, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1084
{"EOS_7_1" ,  "EOS1A14",  1, 7, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1085
{"EOS_8_1" ,  "EOS1A16",  1, 8, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1086
{"EOS_1_-1",  "EOS1C02", -1, 1, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1087
{"EOS_2_-1",  "EOS1C04", -1, 2, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1088
{"EOS_3_-1",  "EOS1C06", -1, 3, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1089
{"EOS_4_-1",  "EOS1C08", -1, 4, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1090
{"EOS_5_-1",  "EOS1C10", -1, 5, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 1325}, // 1091
{"EOS_6_-1",  "EOS1C12", -1, 6, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1092
{"EOS_7_-1",  "EOS1C14", -1, 7, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1093
{"EOS_8_-1",  "EOS1C16", -1, 8, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1094
{"EOS_1_2" ,  "EOS2A02",  2, 1, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1095
{"EOS_2_2" ,  "EOS2A04",  2, 2, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1096
{"EOS_3_2" ,  "EOS2A06",  2, 3, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1097
{"EOS_4_2" ,  "EOS2A08",  2, 4, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1098
{"EOS_5_2" ,  "EOS2A10",  2, 5, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1099
{"EOS_6_2" ,  "EOS2A12",  2, 6, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1100
{"EOS_7_2" ,  "EOS2A14",  2, 7, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1101
{"EOS_8_2" ,  "EOS2A16",  2, 8, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1102
{"EOS_1_-2",  "EOS2C02", -2, 1, "EOS", 2, 3, 56, 3, 56, 14, 1, 2, 1, 0}, // 1103
{"EOS_2_-2",  "EOS2C04", -2, 2, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1104
{"EOS_3_-2",  "EOS2C06", -2, 3, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1105
{"EOS_4_-2",  "EOS2C08", -2, 4, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1106
{"EOS_5_-2",  "EOS2C10", -2, 5, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 2150}, // 1107
{"EOS_6_-2",  "EOS2C12", -2, 6, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1108
{"EOS_7_-2",  "EOS2C14", -2, 7, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1109
{"EOS_8_-2",  "EOS2C16", -2, 8, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1110
{"EOS_1_3" ,  "EOS3A02",  3, 1, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 500}, // 1111
{"EOS_2_3" ,  "EOS3A04",  3, 2, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1112
{"EOS_3_3" ,  "EOS3A06",  3, 3, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 225}, // 1113
{"EOS_4_3" ,  "EOS3A08",  3, 4, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1114
{"EOS_5_3" ,  "EOS3A10",  3, 5, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1115
{"EOS_6_3" ,  "EOS3A12",  3, 6, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1116
{"EOS_7_3" ,  "EOS3A14",  3, 7, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1117
{"EOS_8_3" ,  "EOS3A16",  3, 8, "EOS", 2, 3, 56, 3, 56, 14, 1, 1, 2, 0}, // 1118
{"EOS_1_-3",  "EOS3C02", -3, 1, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1119
{"EOS_2_-3",  "EOS3C04", -3, 2, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1120
{"EOS_3_-3",  "EOS3C06", -3, 3, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1121
{"EOS_4_-3",  "EOS3C08", -3, 4, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1122
{"EOS_5_-3",  "EOS3C10", -3, 5, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 2650}, // 1123
{"EOS_6_-3",  "EOS3C12", -3, 6, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1124
{"EOS_7_-3",  "EOS3C14", -3, 7, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1125
{"EOS_8_-3",  "EOS3C16", -3, 8, "EOS", 2, 3, 56, 3, 56, 14, 2, 2, 1, 0}, // 1126
{"EOS_1_4" ,  "EOS4A02",  4, 1, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3075}, // 1127
{"EOS_2_4" ,  "EOS4A04",  4, 2, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3075}, // 1128
{"EOS_3_4" ,  "EOS4A06",  4, 3, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3075}, // 1129
{"EOS_4_4" ,  "EOS4A08",  4, 4, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3075}, // 1130
{"EOS_5_4" ,  "EOS4A10",  4, 5, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3075}, // 1131
{"EOS_6_4" ,  "EOS4A12",  4, 6, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3075}, // 1132
{"EOS_7_4" ,  "EOS4A14",  4, 7, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3075}, // 1133
{"EOS_8_4" ,  "EOS4A16",  4, 8, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3000}, // 1134
{"EOS_1_-4",  "EOS4C02", -4, 1, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 2100}, // 1135
{"EOS_2_-4",  "EOS4C04", -4, 2, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3075}, // 1136
{"EOS_3_-4",  "EOS4C06", -4, 3, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3075}, // 1137
{"EOS_4_-4",  "EOS4C08", -4, 4, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 2575}, // 1138
{"EOS_5_-4",  "EOS4C10", -4, 5, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3075}, // 1139
{"EOS_6_-4",  "EOS4C12", -4, 6, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3000}, // 1140
{"EOS_7_-4",  "EOS4C14", -4, 7, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 2125}, // 1141
{"EOS_8_-4",  "EOS4C16", -4, 8, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 2025}, // 1142
{"EOS_1_5" ,  "EOS5A02",  5, 1, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1143
{"EOS_2_5" ,  "EOS5A04",  5, 2, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1144
{"EOS_3_5" ,  "EOS5A06",  5, 3, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1145
{"EOS_4_5" ,  "EOS5A08",  5, 4, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1146
{"EOS_5_5" ,  "EOS5A10",  5, 5, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1147
{"EOS_6_5" ,  "EOS5A12",  5, 6, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1148
{"EOS_7_5" ,  "EOS5A14",  5, 7, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1149
{"EOS_8_5" ,  "EOS5A16",  5, 8, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3500}, // 1150
{"EOS_1_-5",  "EOS5C02", -5, 1, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1151
{"EOS_2_-5",  "EOS5C04", -5, 2, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1152
{"EOS_3_-5",  "EOS5C06", -5, 3, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1153
{"EOS_4_-5",  "EOS5C08", -5, 4, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1154
{"EOS_5_-5",  "EOS5C10", -5, 5, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1155
{"EOS_6_-5",  "EOS5C12", -5, 6, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1156
{"EOS_7_-5",  "EOS5C14", -5, 7, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1157
{"EOS_8_-5",  "EOS5C16", -5, 8, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3500}, // 1158
{"EOS_1_6" ,  "EOS6A02",  6, 1, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1159
{"EOS_2_6" ,  "EOS6A04",  6, 2, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1160
{"EOS_3_6" ,  "EOS6A06",  6, 3, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1161
{"EOS_4_6" ,  "EOS6A08",  6, 4, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1162
{"EOS_5_6" ,  "EOS6A10",  6, 5, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1163
{"EOS_6_6" ,  "EOS6A12",  6, 6, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1164
{"EOS_7_6" ,  "EOS6A14",  6, 7, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1165
{"EOS_8_6" ,  "EOS6A16",  6, 8, "EOS", 2, 3, 48, 3, 48, 12, 1, 1, 2, 3950}, // 1166
{"EOS_1_-6",  "EOS6C02", -6, 1, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950}, // 1167
{"EOS_2_-6",  "EOS6C04", -6, 2, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950}, // 1168
{"EOS_3_-6",  "EOS6C06", -6, 3, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950}, // 1169
{"EOS_4_-6",  "EOS6C08", -6, 4, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950}, // 1170
{"EOS_5_-6",  "EOS6C10", -6, 5, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950}, // 1171
{"EOS_6_-6",  "EOS6C12", -6, 6, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950}, // 1172
{"EOS_7_-6",  "EOS6C14", -6, 7, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950}, // 1173
{"EOS_8_-6",  "EOS6C16", -6, 8, "EOS", 2, 3, 48, 3, 48, 12, 2, 2, 1, 3950} // 1174
}; // BMS cutout BOS6-projective, BOG-rail, EMS1/3, !!!

const int MAXCHAMBERS=1174;
//const int MAXCHAMBERS = sizeof(chlist)/sizeof(chlist[0]);

// Channel Mapping

// for all 3x8 chambers
int const mapI [8] = {6, 1, 8, 2, 7, 3, 5, 4}; // HH Type 1	map3x8b
int const mapII[8] = {8, 1, 7, 2, 6, 3, 5, 4}; // HH Type 2	map3x8a

// for 4x6 EndCap chambers (EIS,EIL in H8)
int const mapIII[6] = {5, 6, 4, 2, 3, 1}; // Type 3    map436
int const mapIV [6] = {4, 2, 5, 1, 6, 3}; // Type 4    map446
int const map4x6[6] = {4, 1, 5, 2, 6, 3}; // special   map4x6

int const map4x6g[6] = {2, 1, 3, 5, 4, 6}; // Type 5 BIM #1,3 on EIL4 for III
int const map4x6h[6] = {3, 5, 2, 6, 1, 4}; // Type 6 BIM #0,2 on EIL4 for IV

// for 4x6 barrel chambers (BIL1,BIL2 in H8)
int const map4x6d[6] = {1, 3, 2, 4, 6, 5}; // 
int const map4x6e[6] = {3, 6, 1, 5, 2, 4}; // 
int const map4x6f[6] = {3, 6, 2, 5, 1, 4}; // 


int EL2PH( const char* ChName, int const MezzCard, int const numChan);
int PH2EL( const char* Chname, int const ml, int const layer, int const tube);
int MDTinfo(const char* ChName, char* Type, char* Layer,
	    char* chClass, char& chEnd, int& chSec, int& chNum,
	    char* PhiType, char* PhiLayer);

//  Check for valid chamber name.
//  Returns chlist[] index of chamber, else -1 
int checkchamber( const char* chamber, int ml, int layer, int tube ) {
  for( int ii=0; ii<MAXCHAMBERS; ii++ )
    if( (strcmp(chamber,chlist[ii].hardname)==0 ) &&
	(layer>0 && tube >0) &&
	( (ml==1 && layer<=chlist[ii].nly_ml1 && tube<=chlist[ii].ntl_ml1) ||
	  (ml==2 && layer<=chlist[ii].nly_ml2 && tube<=chlist[ii].ntl_ml2) )
	) return ii;
  return -1;
} // checkchamber =============================================

int MDTindex( const char* ChName ) {
  int idx=-1;
  char chName[10];
  strcpy(chName,ChName);
  for(int ii=0; ii!=(int)strlen(ChName); ++ii) chName[ii]=toupper(ChName[ii]);
  for( int ii=0; ii!=MAXCHAMBERS; ++ii ){
    if( strcmp(chlist[ii].hardname,chName)==0 ){
      idx=ii;
      break;
    }
  } // ii-loop
  if(idx<0){
    for( int ii=0; ii!=MAXCHAMBERS; ++ii ){
      if( strcmp(chlist[ii].calname,chName)==0 ){
	idx=ii;
	break;
      }
    } // ii-loop
  } // not chamber name
  if(idx<0)
    std::cerr << "\n MDTindex(" << ChName << ") not found" << std::endl;
  return idx;
} // MDTindex ===============================================================

// Version using muonfixedid as argument
int MDTindex( const int mfid ) {
  int idx=-1;
// construct "software" name and then find it in list of chambers.
  char chName[10];
  int sid  = StationID(mfid);
  sprintf(chName,"%s_%i_%i",ChamberType(sid),StationPhi(mfid),StationEta(mfid));
  for( int ii=0; ii!=MAXCHAMBERS; ++ii ){
    if( strcmp(chlist[ii].calname,chName)==0 ){
      idx=ii;
      break;
    }
  } // ii-loop
  if(idx<0) std::cerr << "\n MDTindex(" << mfid << ") not found\n";
  return idx;
} // MDTindex ===============================================================

int MDThardname( char* ChName, int idx ) {
  if( idx>=0 && idx<MAXCHAMBERS ){
    strcpy(ChName,chlist[idx].hardname);
  } else {
    if(idx!=-1) std::cerr << "\nMDThardname: bad idx=" << idx << std::endl;
    strcpy(ChName,"IsWRONG");
  }
  return idx;
} // MDThardname ============================================================

int MDThardname( char* ChName, const char* ChStation ) {
  int idx = MDTindex( ChStation );
  MDThardname( ChName, idx );
  return idx;
} // MDThardname ============================================================

std::string MDThardname( int idx )
{
  std::string ChName;
  if( idx>=0 && idx<MAXCHAMBERS ){
    ChName=chlist[idx].hardname;
  } else {
    if(idx!=-1) std::cerr << "\nMDThardname: bad idx=" << idx << std::endl;
    ChName="IsWRONG";
  }
  return ChName;
} // MDThardname ============================================================

int MDTcalname( char* ChStation, int idx ) {
  if( idx>=0 && idx<MAXCHAMBERS ){
    strcpy(ChStation,chlist[idx].calname);
  } else {
    std::cerr << "\n MDTcalname: bad idx=" << idx << "\n" << std::endl;
    strcpy(ChStation,"IsWRONG");
  }
  return idx;
} // MDTcalname ============================================================

int MDTcalname( char* ChStation, const char* ChName ) {
  int idx = MDTindex( ChName );
  MDTcalname( ChStation, idx );
  return idx;
} // MDTcalname ============================================================

int MDTstation( const char* ChName, char* Station ) {
  strcpy(Station,"BAD");
  int idx = MDTindex( ChName );
  if( idx>=0 ) strcpy(Station,chlist[idx].station);
  return idx;
} // MDTstation ==============================================================

int MDTeta( const char* ChName ) {
  int idx = MDTindex( ChName );
  if( idx<0 ) return 0;
  else        return chlist[idx].eta;
} // MDTeta ==================================================================

int MDTphi( const char* ChName ) {
  int idx = MDTindex( ChName );
  if( idx<0 ) return 0;
  else        return chlist[idx].phi;
} // MDTphi ==================================================================

int MDTtotalLayers( const char* ChName ) {
  int idx = MDTindex( ChName );
  if( idx<0 ) return 0;
  else return MDTnLml( ChName, 0);
} // MDTtotalLayers ==========================================================

int MDTtotalLayers( int idx ) {
  if( idx<0 || idx>=MAXCHAMBERS ) return 0;
  else return (chlist[idx].nly_ml1+chlist[idx].nly_ml2);
} // MDTtotalLayers ==========================================================                                                                          



int MDTnML( const char* ChName ) {
  int idx=MDTindex( ChName );
  if(idx<0) return 0;
  else      return chlist[idx].num_ml;
} // MDTnML ==================================================================
int MDTnTly( const char* ChName, int ml ) {
  if( ml<0 || ml>2 ){
    std::cerr << "MDTnTly bad ml=" << ml << ". Returned 0" << std::endl;
    return 0;
  }
  int nt_ly=0, idx=MDTindex( ChName );
  if(idx>=0){
    if      (ml==1) nt_ly= chlist[idx].ntl_ml1;
    else if (ml==2) nt_ly= chlist[idx].ntl_ml2;
    else if (ml==0) nt_ly= chlist[idx].ntl_ml1+chlist[idx].ntl_ml2;
  }
  return nt_ly;
} // MDTnTly ============================================================

int MDTnTml( const char* ChName, int ml ) {
  if( ml<0 || ml>2 ){
    std::cerr << "MDTnTml bad ml=" << ml << ". Returned 0" << std::endl;
    return 0;
  }
  int nt_ml=0, idx=MDTindex( ChName);
  if(idx>=0){
    if      (ml==1) nt_ml= chlist[idx].ntl_ml1*chlist[idx].nly_ml1;
    else if (ml==2) nt_ml= chlist[idx].ntl_ml2*chlist[idx].nly_ml2;
    else if (ml==0) nt_ml=(chlist[idx].ntl_ml1*chlist[idx].nly_ml1+
			   chlist[idx].ntl_ml2*chlist[idx].nly_ml2);
  }
  return nt_ml;
} // MDTnTml ============================================================

int MDTnLml( const char* ChName, int ml ) {
  if( ml<0 || ml>2 ){
    std::cerr << "MDTnLml bad ml=" << ml << ". Returned 0" << std::endl;
    return 0;
  }
  int nl_ml=0, idx=MDTindex( ChName);
  if(idx>=0){
    if      (ml==1) nl_ml= chlist[idx].nly_ml1;
    else if (ml==2) nl_ml= chlist[idx].nly_ml2;
    else if (ml==0) nl_ml=(chlist[idx].nly_ml1+chlist[idx].nly_ml2);
  }
  return nl_ml;
} // MDTnLml ============================================================

int MDTtotalTubes( const char* ChName ) {
  int idx = MDTindex( ChName );
  if( idx<0 ) return 0;
  else return MDTnTml(ChName,0);
} // MDTtotalTubes ==========================================================


int MDTnmezz( const char* ChName ) {
  int idx=MDTindex( ChName );
  if(idx<0) return 0;
  return chlist[idx].n_mezz;
} // MDTnmezz ============================================================

// Returns number of mezzcards included skipped mezzcards due to cut outs
int MDTmaxmezz( const char* ChName ) {
  int idx=MDTindex( ChName );
  if(idx<0) return 0;
  int nmezz = chlist[idx].n_mezz;
  std::string cname = MDThardname(idx);
  if( cname=="BIR1A11" || cname=="BIR1A15" || 
      cname=="BMS4C02" || cname=="BMS4C04" || cname=="BMS4C06" || cname=="BMS4C08" || cname=="BMS4C10" || cname=="BMS4C16" ||
      cname=="BMS6C02" || cname=="BMS6C04" || cname=="BMS6C06" || cname=="BMS6C08" || cname=="BMS6C10" || cname=="BMS6C16" 
      ) nmezz++;
  return nmezz;
} // MDTmaxmezz ============================================================


int MDTmlMZ0( const char* ChName ) {
  int idx=MDTindex( ChName );
  if(idx<0) return 0;
  else      return chlist[idx].mz0ml;
} // MDTmlMZ0 ============================================================

int MDTmlMZ( const char* ChName, int mz ) {
  int m0m = MDTmlMZ0(ChName);
  if(m0m==0) return 0;
  return ( mz%2==0 ? m0m : 3-m0m );
} // MDTmlMZ ===============================================================


int MDTtypeML( const char* ChName, int ml ) {
  if( ml!=1 && ml!=2 ){
    std::cerr << "MDTtypeML bad ml=" << ml << ". Returned 0" << std::endl;
    return 0;
  }
  int idx=MDTindex( ChName );
  if(idx<0) return 0;
  else if( ml==1 ) idx=chlist[idx].mzt_ml1;
  else if( ml==2 ) idx=chlist[idx].mzt_ml2;
  return idx;
} // MDTtypeMZ ===============================================================


int MDTtypeMZ( const char* ChName, int mz ) {
  int ml = MDTmlMZ( ChName, mz );
  return MDTtypeML( ChName, ml );
} // MDTtypeMZ ===============================================================


int Mezz0ML( const char* ChName ) {
  char chClass[4], chEnd, Type[5],Layer[8],PhiType[5],PhiLayer[8];
  int  ml_mz0=0, chSec=0, chNum=0;
  if(MDTinfo(ChName, Type,Layer,chClass,chEnd,chSec,chNum,PhiType,PhiLayer)<0)
    return -1;

  char fake[5];
  sprintf(fake,"%sA",chClass);
  if( strcmp(fake,"BILA")==0 ||
      strcmp(fake,"BIMA")==0 ||
      strcmp(fake,"BIRA")==0 ||
     (strcmp(fake,"BISA")==0 && chNum==8 ) ||
     (strcmp(fake,"BISA")==0 && chSec==12) ||
      strcmp(fake,"BMLA")==0 ||
      strcmp(fake,"BMLA")==0 ||
     (strcmp(fake,"BOFA")==0 && chSec==14) ||
     (strcmp(fake,"BOGA")==0 && chSec==14) ||
      strcmp(fake,"BOLA")==0 ||
      strcmp(chClass,"BEE")==0 ||              // all BEE's have card#0 pm ML1
      strcmp(fake,"EESA")==0 ||
      (strcmp(fake,"EILA")==0 && chNum>3) ||   // EIL4/5 opposite to EIL1/2
      strcmp(fake,"EISA")==0 ||
      strcmp(fake,"EMSA")==0 ||
      strcmp(fake,"EOSA")==0
    ) ml_mz0=1;
  else  ml_mz0=2;
  if( chEnd=='C' && strcmp(Type,"BEEC") ) ml_mz0 = 3 - ml_mz0;
  if( strcmp(ChName,"BML2A07")==0 ) ml_mz0=2; // EXCEPTION ???
 
  return ml_mz0;
} // Mezz0ML =============================================================


int MDTinfo( const char* ChName, char* Type, char* Layer,
             char* chClass, char& chEnd, int& chSec, int& chNum,
             char* PhiType, char* PhiLayer) {
  int DBG=0;
  chEnd='-';
  strcpy(chClass ,"---");
  strcpy(Type    ,"---");
  strcpy(Layer   ,"---");
  strcpy(PhiType ,"---");
  strcpy(PhiLayer,"---");
  chNum=chSec=0;
  int idx = MDTindex( ChName );
  if( idx<0 ) return -1;
  char Name[8];
  sprintf(Name   ,"%s",chlist[idx].hardname);
  sprintf(chClass,"%s",chlist[idx].station);
//  for(int ii=0; ii!=3; ++ii) chClass[ii]=toupper(Name[ii]);
//  chClass[3]='\0';

  if( isdigit(Name[3]) ) chNum = Name[3]-'0';
  if( isdigit(Name[5]) && isdigit(Name[6]) )
    chSec = (Name[5]-'0')*10+(Name[6]-'0');
  if( isalpha(Name[4]) ) chEnd=toupper(Name[4]);

  sprintf(Type,"%s%c",chClass,chEnd);
  strcpy (Layer,"EXTRA");
  if( Name[0]=='B' && strstr(Name,"BEE")==NULL ){
    sprintf(Layer,"%s%02d", chClass, chSec);
    strcpy(PhiLayer,Layer);
  } else if( strstr(Name,"BEE") ){
    sprintf(Layer,"%s%c%02d",chClass,chEnd,chSec); // sector
    sprintf(PhiLayer,"%s%c",chClass,chEnd);
  } else  if( Name[0]=='E' ){
    sprintf(Layer,"%s%c%02d",chClass,chEnd,chSec); // sector
    sprintf(PhiLayer,"%c%c%d%c",chClass[0],chClass[1],chNum,chEnd);
  }

  if( Name[0]=='B' && strstr(Name,"BEE")==NULL ){
    strcpy(PhiType,Type);
  } else if( strstr(Name,"BEE") ){
    //sprintf(PhiType,"%s_%c",chClass,chEnd);
    strcpy(PhiType,Type);
  } else if(strstr(Name,"EM") || strstr(Name,"EI") ||
            strstr(Name,"EE") || strstr(Name,"EO")){
    sprintf(PhiType,"%c%c%c",chClass[0],chClass[1],chEnd);
  }

  if(DBG) std::cout << " MDTinfo(" << ChName << ") "
                    << " Class=" << chClass
                    << " Sect="  << std::setw(2) << chSec
                    << " End="   << chEnd
                    << " Num="   << chNum
                    << " ==> Type="  << std::setw(4) << Type
                    << "  Layer="    << std::setw(6) << Layer
                    << "  PhiType="  << std::setw(4) << PhiType
                    << "  PhiLayer=" << PhiLayer
                    << std::endl;
  return 0;
} // MDTinfo ===============================================================



//========================= MAPPING Routines =============================//
// GENERAL CASE: ML1 != ML2 for #layers and/or #tubes                     //
// (assumed same #tubes/layer for each layer in the same ml)              //
//------------------------------------------------------------------------//

int MLLT2MLLT( const char* ChName, int mllt, int& ml, int& ly, int& nt ) {
// MLLT -> ml, ly, nt 
  int OK=1, DBG=0;
  ml = mllt/1000;
  ly =(mllt/100)%10;
  nt = mllt%100;
  if(DBG){
    std::cerr << "\n MLLT2MLLT(" << mllt
	      << ", #ML1="  << MDTnLml( ChName, 1 )
	      << ", #ML2="  << MDTnLml( ChName, 2 )
	      << ", #T/L1=" << MDTnTly( ChName, 1 )
	      << ", #T/L2=" << MDTnTly( ChName, 2 )
	      << ") -> " << ml << " " << ly << " " << nt;
    fflush(NULL);
  } // DBG
  if(      mllt<=0 || mllt >2478 ){
    OK=0; if(DBG) std::cerr << "bad MLLT " << mllt << std::endl;
  } else if( ml<1 || ml>2 ){
    OK=0; if(DBG) std::cerr << "bad ML "    << ml << std::endl;
  } else if( ly<1 || ly>MDTnLml(ChName,ml) ){
    OK=0; if(DBG) std::cerr << "bad LAYER " << ly << " vs " << MDTnLml(ChName,ml) << std::endl;
  } else if( nt<1 || nt>MDTnTly(ChName,ml) ){
    OK=0; if(DBG) std::cerr << "bad TUBE "  << nt << " vs " << MDTnTly(ChName,ml) << std::endl;
  }
  if( OK==0 ) ml=ly=nt=0;
  if(DBG) std::cout << (OK ? " OK" : " NOT OK") << std::endl;
  return OK;
} // MLLT2T ==================================================================

// MLLT <- #tube(1...) 
int T2MLLT( const char* ChName, int tb ) {
  int DBG=0, idx=MDTindex( ChName );
  if( idx<0 || tb<0 || tb>MDTtotalTubes(ChName) ){
    std::cerr << " T2MLLT " << ChName << " tb=" << tb << " ERROR" << std::endl;
    return 0;
  } else if(DBG){
    std::cout << "\t\t T2MLLT " << ChName << " tb=" << tb;
    fflush(NULL);
  }
  if(DBG>1) for(int ml=0; ml!=3; ++ml )
    std::cout << "\n\t\t\t ml=" << ml
	      << "\t #L/ml=" << MDTnLml( ChName, ml )
	      << "\t #T/ly=" << MDTnTly( ChName, ml )
	      << std::endl;

  int ml = ( tb<=MDTnTml(ChName,1) ? 1 : 2 );
  if(DBG) std::cout << " ml=" << ml; fflush(NULL);

  if(ml==2){
    tb -= MDTnTml(ChName,1); // now #tube in ML#2
    if(DBG) std::cout << " tb(2)=" << tb;  fflush(NULL);
  }
  int ly = 1+tb/MDTnTly(ChName,ml) - (tb%MDTnTly(ChName,ml)==0 ? 1 : 0);
  if(DBG) std::cout << " ly=" << ly;  fflush(NULL);

  int nt = tb - (ly-1)*MDTnTly(ChName,ml); // now #tube in that layer
  if(DBG) std::cout << " nt=" << std::setw(2) << nt;  fflush(NULL);
  int mllt=ml*1000+ly*100+nt;
  if(DBG) std::cout << "  mllnt=" << std::setw(4) << mllt;  fflush(NULL);
  int OK = MLLT2MLLT( ChName, mllt, ml, ly, nt );
  if(DBG) std::cout << (OK ? " OK" : " NOT OK") 
		    << " ml=" << ml << " ly=" << ly
		    << " nt=" << std::setw(2) << nt << std::endl;
  if(!OK) mllt=0;
  return mllt;
} // T2MLLT ==================================================================

// MLLT -> #tube
int MLLT2T( const char* ChName, int mllt ) {
  int ml=0, ly=0, nt=0;
  int OK = MLLT2MLLT(ChName, mllt, ml, ly, nt);
  if(OK) OK = (ml-1)*MDTnTml(ChName,1) + (ly-1)*MDTnTly(ChName,ml) + nt;
  return OK;
} // MLLT2T ==================================================================

//MLLT-> layer 1..#L) 
int MLLT2L( const char* ChName, int mllt ) {
  int ml=0, ly=0, nt=0;
  int OK = MLLT2MLLT(ChName, mllt, ml, ly, nt);
  if(OK) OK = (ml-1)*MDTnLml(ChName,1) + ly;
  return OK;
} // MLLT2L ==================================================================

//MLLT->mezz
int MLLT2M( const char* ChName, int mllt ) {
  int ml=0, ly=0, nt=0, DBG=0;
  int OK = MLLT2MLLT(ChName, mllt, ml, ly, nt);
  if(OK){
    int ntl_mez = 24/MDTnLml(ChName,ml);
    OK = MDTnML(ChName)*((nt-1)/ntl_mez) + ( ml==MDTmlMZ0(ChName) ? 0 : 1);
  }
  if(DBG) std::cout << " MLLT2M " << mllt
		    << " ml=" << ml << " ly=" << ly
		    << " nt=" << std::setw(2) << nt 
		    << " ==> " << OK << std::endl;
  return OK; 
} // MLLT2M ==================================================================

// Find the tubes belonging to a specific mezzcard 
// mezz = mezzcard number 
// tube = array to be filled with 24 MLLT numbers of tubes in mezzcard mezz
//        (of at least size 24) 
//        tubes will be ordered by layer and tube number
int MLLTInMezz( const char* ChName, int mezz, int* tubes ) { 
  int DBG=0;
  for( int nt=0; nt!=24; ++nt ) tubes[nt]=-1;
  if( MDTindex(ChName)<0 || mezz<0 || mezz>MDTnmezz(ChName) ||
      ( (strstr(ChName,"BMS4C") || strstr(ChName,"BMS6C")) && mezz==10 )
    ) return -1;
  int mllt=-1;
// Loop over tubes in chamber until find a tube in the mezzcard.
  for( int tb=1; tb<=MDTtotalTubes(ChName); ++tb ){
    mllt=T2MLLT(ChName, tb );
    if( MLLT2M(ChName,mllt)==mezz ) break;
  } // tb-loop
  if( mllt>=0 ){
    int counter=0, nly=MDTnLml(ChName,1);
    int step=24/nly, first=mllt;
    for( int ly=0; ly<nly; ++ly ){
      mllt = first+100*ly;
      for( int nt=0; nt<step; ++nt ){
	tubes[counter]=mllt+nt;
	++counter;
      } // nt-loop
    } // ly-loop
  } else {
    if(DBG) std::cerr << " MLLTInMezz ERROR: not a single tube for to mezz=" 
		      << mezz << std::endl;
    return -1;
  }
  return 0;
} // MLLTInMezz =============================================================

int TInMezz( const char* ChName, int mezz, int* tubes ) {
  int DBG=0;
  if( MLLTInMezz( ChName, mezz, tubes )<0 ){ // mezz->MLLT
    return -1;
  } else {
    for( int ii=0; ii!=24; ++ii ) {
      if( DBG ) std::cout << std::setw(2) << ii << " " << tubes[ii];
      tubes[ii] = MLLT2T( ChName, tubes[ii] );
      if( DBG ) std::cout << " -> " << std::setw(3) << tubes[ii] << std::endl;
    }
  }
  return 0; 
} // TInMezz ================================================================

int IsTInMezz( const char* ChName, int tb, int mezz ) {
  int tubes[24], ierr=0;
  if( tb<1000 ) ierr=TInMezz( ChName, mezz, tubes );
  else       ierr=MLLTInMezz( ChName, mezz, tubes );
  if(ierr==0) for( int ii=0; ii!=24; ++ii ) if( tubes[ii]==tb ) return 1;
  return 0;
} // IsTInMezz ==============================================================

int EL2PH( const char* ChName, int mz, int nc ) {
  int  dbg=0, chSec=0, chNum=0;
  char Type[5], Layer[7], chClass[4], chEnd, PhiType[7], PhiLayer[7];
  MDTinfo(ChName,Type,Layer,chClass,chEnd,chSec,chNum,PhiType,PhiLayer);
  int ml = MDTmlMZ(ChName,mz), ly=0, nt=0;
  sprintf(PhiType,"%s%d%c",chClass,chNum,chEnd);
  if(dbg) std::cout << " EL2PH(" << ChName << ",mz=" << mz << ", nc=" << nc
		    << ") ==> ml=" << ml;
  int nt_step=24/MDTnLml(ChName,1);
  if(        strcmp(Type,"EMLA")==0 || strcmp(Type,"EMSC")==0 ||
	     strcmp(Type,"EOLA")==0 || strcmp(Type,"EOSC")==0 ||
	     strcmp(Type,"EELA")==0 || strcmp(Type,"EESC")==0 ||
	     (strcmp(Type,"EILA")==0 && chNum!=4) ||
	     (strcmp(Type,"EILC")==0 && chNum==4) ||
	     strcmp(Type,"EISC")==0 ){
    ly = 1 + nc/nt_step;
  } else if( strcmp(Type,"EMLC")==0 || strcmp(Type,"EMSA")==0 ||
             strcmp(Type,"EOLC")==0 || strcmp(Type,"EOSA")==0 ||
	     strcmp(Type,"EELC")==0 || strcmp(Type,"EESA")==0 ||
	     (strcmp(Type,"EILA")==0 && chNum==4) ||
	     (strcmp(Type,"EILC")==0 && chNum!=4) || 
	     strcmp(Type,"EISA")==0 ){
    ly = MDTnLml(ChName,1) - nc/nt_step;
  }
  if(dbg) std::cout << " ly=" << ly << "/" << MDTnLml(ChName,1) 
		    << " (#t/step=" << nt_step <<") " << Type ;
  int offset = (mz-mz%2)/2 * nt_step;
  int J = nc % nt_step;
  int hh_type = MDTtypeML(ChName,ml);
  if(      hh_type==1 ) nt=mapI  [J]+offset;
  else if( hh_type==2 ) nt=mapII [J]+offset;
  else if( hh_type==3 ){
    if( strcmp(chClass,"EIL")==0 && chNum==4 && (chSec==1 ||chSec==9) ){
      nt=map4x6g[J]+offset;
      if(dbg) std::cout << "   g";
    } else {
      nt=mapIII [J]+offset;
      if(dbg) std::cout << " III";
    }
  } else if( hh_type==4 ){
    if( strcmp(chClass,"EIL")==0 && chNum==4 && (chSec==1 ||chSec==9) ){
      nt=map4x6h[J]+offset;
      if(dbg) std::cout << "   h";
    } else {
      nt=mapIV  [J]+offset;
      if(dbg)std::cout << Type << " " << chNum << " ml=" << ml << " ly=" << ly;
      if( (strcmp(Type,"EILA")==0 && chNum!=4 && ml==2 && ly==4) ||
	  (strcmp(Type,"EILC")==0 && chNum!=4 && ml==1 && ly==1) ||
	  (strcmp(PhiType,"EIL4A")==0      && ml==1 && ly==1) ||
	  (strcmp(PhiType,"EIL4C")==0      && ml==2 && ly==4) ){
	nt=map4x6[J]+offset;
	if(dbg) std::cout << " 4x6" << std::endl;
      } else {
	if(dbg) std::cout << "  IV" << std::endl;
      }
    }
  } // types
  if(dbg) std::cout << " hh_type=" << hh_type
		    << " offset=" << offset
		    << " J=" << J 
		    << " nt=" << nt << std::endl;
  return ml*1000+ly*100+nt;
} // EL2PH ==================================================================

int PH2EL( const char* ChName, int ml, int ly, int nt ) {
  int nc=0, mz=MLLT2M( ChName, 1000*ml+100*ly+nt );
  return mz*100+nc;
} // PH2EL ==================================================================

// Read mezzcard map from file load into std::map
MezzcardMap::MezzcardMap(const int debug) {
  std::ifstream fin;
  fin.open("/atlas/data18c/muoncal/calib/mdt_mrod_map_ed.txt");
  if( fin.is_open() == 0 ) {
    printf("ERROR: cannot open mezzcard channel map file\n");
    return;
  } 
  std::string line="", prev="", buf;
  int nlines=0, ncham=0, ml=0, ly=0, tb=0, MezzCh=0, TubeID=0;
  while(getline(fin, line)) {
    nlines++;
    if( line[0] != 'E' && line[0] != 'B') continue;
    std::stringstream ss(line); // Insert the string into a stream
    std::vector<std::string> tokens; // Create vector to hold our words
    while (ss >> buf) tokens.push_back(buf);
    //      Chamber,ML,Layer,Tube,MezzCh,TubeID = line.split()
    ml     = atoi(tokens[1].c_str());
    ly     = atoi(tokens[2].c_str());
    tb     = atoi(tokens[3].c_str());
    MezzCh = atoi(tokens[4].c_str());
    TubeID = atoi(tokens[5].c_str());
    channelmap[TubeID] = MezzCh;
    mllt2csmmzch[ml*1000+ly*100+tb] = MezzCh;
    if( prev != tokens[0] ) {
      prev = tokens[0];
      ncham++;
    }
  }
  if( debug ) printf("Mezzmap chambers=%i tubes=%i=%i\n",
		     ncham,(int)channelmap.size(),(int)mllt2csmmzch.size());
}   //end MezzcardMap::MezzcardMap

int MezzcardMap::Channel( const int mfid ) {
  char chamber[8];
// Check for valid mfid
  ChamberName(mfid,chamber);
  int ml    = MdtML(mfid); 
  int layer = MdtLayer(mfid);
  int tube  = MdtTube(mfid);
  if( checkchamber(chamber,ml,layer,tube) < 0 ) {
    printf("MezzcardMap ERROR: invalid MDT mfid %i (%s!?)\n",mfid,chamber);
    return -1;
  }
  return channelmap[mfid];
}   //end MezzcardMap::Channel

int MezzcardMap::Channel( char *chamber, const int ml, const int ly, const int tb ) {
// Check for valid chamber
  if( checkchamber(chamber,ml,ly,tb) < 0 ) {
    printf("MezzcardMap ERROR: invalid MDT chamber-ml-ly-tb %s-%i-%i-%i\n",chamber,ml,ly,tb);
    return -1;
  }
  int mfid = SetMdtID(chamber,ml,ly,tb);
  return channelmap[mfid];
}   //end MezzcardMap::Channel

int MezzcardMap::Channel( char *chamber, const int mllt) {
// Check for valid chamber
  int ml = mllt/1000;
  int ly = (mllt-ml*1000)/100;
  int tb = mllt%100; 
  if( checkchamber(chamber,ml,ly,tb) < 0 ) {
    printf("MezzcardMap ERROR: invalid MDT chamber-ml-ly-tb %s-%i-%i-%i\n",chamber,ml,ly,tb);
    return -1;
  }
  return mllt2csmmzch[mllt];
} // end MezzcardMap::Channel


//// for 4x6 EndCap chambers (EIS,EIL in H8)
//int const mapIII[6] = {5, 6, 4, 2, 3, 1}; // Type 3    map436
//int const mapIV [6] = {4, 2, 5, 1, 6, 3}; // Type 4    map446
//int const map4x6[6] = {4, 1, 5, 2, 6, 3}; // special   map4x6
//
//// for 4x6 barrel chambers (BIL1,BIL2 in H8)
//int const map4x6d[6] = {1, 3, 2, 4, 6, 5}; // 
//int const map4x6e[6] = {3, 6, 1, 5, 2, 4}; // 
//int const map4x6f[6] = {3, 6, 2, 5, 1, 4}; // 
//
//int const map4x6g[6] = {2, 1, 3, 5, 4, 6}; // EIL5 = BIM 1,3 on EIL4 for III
//int const map4x6h[6] = {3, 5, 2, 6, 1, 4}; // EIL5 = BIM 0,2 on EIL4 for IV
#endif
